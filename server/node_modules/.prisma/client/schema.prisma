generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Define the Enum
enum AccountStatus {
  Active
  Suspended
  Banned
}

enum TicketStatus {
  Active
  Canceled
  Ended
  Won
}

enum TransactionType {
  Deposit
  Withdraw
  PurchaseTicket
  CancelTicket
}

enum LotteryStatus {
  Open
  Closed
  Completed
  Canceled
}

enum LotteryType {
  Like
  Classic
  Fundraising
}

model User {
  id                        String               @id @default(auto()) @map("_id") @db.ObjectId
  firstName                 String?
  lastName                  String?
  fullName                  String?
  email                     String               @unique
  picture                   String?
  balance                   Int                  @default(0)
  accountStatus             AccountStatus        @default(Active)
  DataOfBirth               DateTime?
  tickets                   Ticket[]             @relation("UserTickets")
  ownedLotteriesLike        LotteryLike[]        @relation("Owner")
  ownedLotteriesFundraising LotteryFundraising[] @relation("Owner")
  ownedLotteriesClassic     LotteryClassic[]     @relation("Owner")

  transactionHistory Transaction[] @relation("UserTransactions")
}

model LotteryLike {
  id                      String        @id @default(auto()) @map("_id") @db.ObjectId
  hosted                  String
  title                   String?
  description             String?
  image                   String?
  paticipationdescription String?
  startDate               DateTime      @default(now())
  endDate                 DateTime
  lotteryStatus           LotteryStatus @default(Open)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  conditions              Json[]
  prizes                  Json[]
  link                    String        @unique
  owner                   User          @relation("Owner", fields: [ownerEmail], references: [email])
  ownerEmail              String
  tickets                 Ticket[]      @relation("UserTicket")
}

model LotteryFundraising {
  id                      String        @id @default(auto()) @map("_id") @db.ObjectId
  hosted                  String
  title                   String?
  description             String?
  image                   String?
  paticipationdescription String?
  startDate               DateTime      @default(now())
  endDate                 DateTime
  lotteryStatus           LotteryStatus @default(Open)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  price                   Int
  prizes                  Json[]
  owner                   User          @relation("Owner", fields: [ownerEmail], references: [email])
  ownerEmail              String
  tickets                 Ticket[]      @relation("UserTicket")
}

model LotteryClassic {
  id                      String        @id @default(auto()) @map("_id") @db.ObjectId
  hosted                  String
  title                   String?
  description             String?
  image                   String?
  paticipationdescription String?
  startDate               DateTime      @default(now())
  endDate                 DateTime
  lotteryStatus           LotteryStatus @default(Open)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  availableNumberRange    Int
  drawnNumbersCount       Int
  price                   Int
  prizes                  Json[]
  owner                   User          @relation("Owner", fields: [ownerEmail], references: [email])
  ownerEmail              String
  tickets                 Ticket[]      @relation("UserTicket")
}

model Ticket {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  lotteryType  LotteryType // Enum to specify the type of lottery (Like, Classic, Fundraising)
  lotteryId    String       @db.ObjectId // Foreign key to either LotteryLike or LotteryFundraising
  ticketNumber String       @unique
  purchaseDate DateTime     @default(now())
  status       TicketStatus @default(Active)
  numbers      Json?

  lotteryClassic     LotteryClassic?     @relation("UserTicket", fields: [lotteryId], references: [id])
  lotteryLike        LotteryLike?        @relation("UserTicket", fields: [lotteryId], references: [id])
  lotteryFundraising LotteryFundraising? @relation("UserTicket", fields: [lotteryId], references: [id])

  user   User   @relation("UserTickets", fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Transaction {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  amount          Int
  transactionType TransactionType
  creditCard      String?
  createdAt       DateTime        @default(now())
  user            User            @relation("UserTransactions", fields: [userId], references: [id])
  userId          String          @db.ObjectId

  @@unique(fields: [id, userId])
}

//////////////////////////////////////////////////////////////////////
model Residency {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Int
  address     String
  city        String
  country     String
  image       String
  facilities  Json
  userEmail   String
  //owner       User     @relation("Owner", fields: [userEmail], references: [email])
  createdAt   DateTime @default(now())
  //updatedAt   DateTime @updatedAt

  @@unique(fields: [address, userEmail])
}
