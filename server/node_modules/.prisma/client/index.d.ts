
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model LotteryLike
 * 
 */
export type LotteryLike = $Result.DefaultSelection<Prisma.$LotteryLikePayload>
/**
 * Model LotteryFundraising
 * 
 */
export type LotteryFundraising = $Result.DefaultSelection<Prisma.$LotteryFundraisingPayload>
/**
 * Model LotteryClassic
 * 
 */
export type LotteryClassic = $Result.DefaultSelection<Prisma.$LotteryClassicPayload>
/**
 * Model Ticket
 * 
 */
export type Ticket = $Result.DefaultSelection<Prisma.$TicketPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AccountStatus: {
  Active: 'Active',
  Suspended: 'Suspended',
  Banned: 'Banned'
};

export type AccountStatus = (typeof AccountStatus)[keyof typeof AccountStatus]


export const LotteryStatus: {
  Open: 'Open',
  Closed: 'Closed',
  Completed: 'Completed',
  Canceled: 'Canceled'
};

export type LotteryStatus = (typeof LotteryStatus)[keyof typeof LotteryStatus]


export const LotteryType: {
  Like: 'Like',
  Classic: 'Classic',
  Fundraising: 'Fundraising'
};

export type LotteryType = (typeof LotteryType)[keyof typeof LotteryType]


export const TicketStatus: {
  Active: 'Active',
  Canceled: 'Canceled',
  Ended: 'Ended',
  Won: 'Won'
};

export type TicketStatus = (typeof TicketStatus)[keyof typeof TicketStatus]


export const TransactionType: {
  Deposit: 'Deposit',
  Withdraw: 'Withdraw',
  PurchaseTicket: 'PurchaseTicket',
  CancelTicket: 'CancelTicket'
};

export type TransactionType = (typeof TransactionType)[keyof typeof TransactionType]

}

export type AccountStatus = $Enums.AccountStatus

export const AccountStatus: typeof $Enums.AccountStatus

export type LotteryStatus = $Enums.LotteryStatus

export const LotteryStatus: typeof $Enums.LotteryStatus

export type LotteryType = $Enums.LotteryType

export const LotteryType: typeof $Enums.LotteryType

export type TicketStatus = $Enums.TicketStatus

export const TicketStatus: typeof $Enums.TicketStatus

export type TransactionType = $Enums.TransactionType

export const TransactionType: typeof $Enums.TransactionType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.lotteryLike`: Exposes CRUD operations for the **LotteryLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LotteryLikes
    * const lotteryLikes = await prisma.lotteryLike.findMany()
    * ```
    */
  get lotteryLike(): Prisma.LotteryLikeDelegate<ExtArgs>;

  /**
   * `prisma.lotteryFundraising`: Exposes CRUD operations for the **LotteryFundraising** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LotteryFundraisings
    * const lotteryFundraisings = await prisma.lotteryFundraising.findMany()
    * ```
    */
  get lotteryFundraising(): Prisma.LotteryFundraisingDelegate<ExtArgs>;

  /**
   * `prisma.lotteryClassic`: Exposes CRUD operations for the **LotteryClassic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LotteryClassics
    * const lotteryClassics = await prisma.lotteryClassic.findMany()
    * ```
    */
  get lotteryClassic(): Prisma.LotteryClassicDelegate<ExtArgs>;

  /**
   * `prisma.ticket`: Exposes CRUD operations for the **Ticket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.ticket.findMany()
    * ```
    */
  get ticket(): Prisma.TicketDelegate<ExtArgs>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    LotteryLike: 'LotteryLike',
    LotteryFundraising: 'LotteryFundraising',
    LotteryClassic: 'LotteryClassic',
    Ticket: 'Ticket',
    Transaction: 'Transaction'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "lotteryLike" | "lotteryFundraising" | "lotteryClassic" | "ticket" | "transaction"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      LotteryLike: {
        payload: Prisma.$LotteryLikePayload<ExtArgs>
        fields: Prisma.LotteryLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LotteryLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LotteryLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryLikePayload>
          }
          findFirst: {
            args: Prisma.LotteryLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LotteryLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryLikePayload>
          }
          findMany: {
            args: Prisma.LotteryLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryLikePayload>[]
          }
          create: {
            args: Prisma.LotteryLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryLikePayload>
          }
          createMany: {
            args: Prisma.LotteryLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LotteryLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryLikePayload>
          }
          update: {
            args: Prisma.LotteryLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryLikePayload>
          }
          deleteMany: {
            args: Prisma.LotteryLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LotteryLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LotteryLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryLikePayload>
          }
          aggregate: {
            args: Prisma.LotteryLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLotteryLike>
          }
          groupBy: {
            args: Prisma.LotteryLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<LotteryLikeGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.LotteryLikeFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.LotteryLikeAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.LotteryLikeCountArgs<ExtArgs>
            result: $Utils.Optional<LotteryLikeCountAggregateOutputType> | number
          }
        }
      }
      LotteryFundraising: {
        payload: Prisma.$LotteryFundraisingPayload<ExtArgs>
        fields: Prisma.LotteryFundraisingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LotteryFundraisingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryFundraisingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LotteryFundraisingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryFundraisingPayload>
          }
          findFirst: {
            args: Prisma.LotteryFundraisingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryFundraisingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LotteryFundraisingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryFundraisingPayload>
          }
          findMany: {
            args: Prisma.LotteryFundraisingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryFundraisingPayload>[]
          }
          create: {
            args: Prisma.LotteryFundraisingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryFundraisingPayload>
          }
          createMany: {
            args: Prisma.LotteryFundraisingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LotteryFundraisingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryFundraisingPayload>
          }
          update: {
            args: Prisma.LotteryFundraisingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryFundraisingPayload>
          }
          deleteMany: {
            args: Prisma.LotteryFundraisingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LotteryFundraisingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LotteryFundraisingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryFundraisingPayload>
          }
          aggregate: {
            args: Prisma.LotteryFundraisingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLotteryFundraising>
          }
          groupBy: {
            args: Prisma.LotteryFundraisingGroupByArgs<ExtArgs>
            result: $Utils.Optional<LotteryFundraisingGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.LotteryFundraisingFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.LotteryFundraisingAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.LotteryFundraisingCountArgs<ExtArgs>
            result: $Utils.Optional<LotteryFundraisingCountAggregateOutputType> | number
          }
        }
      }
      LotteryClassic: {
        payload: Prisma.$LotteryClassicPayload<ExtArgs>
        fields: Prisma.LotteryClassicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LotteryClassicFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryClassicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LotteryClassicFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryClassicPayload>
          }
          findFirst: {
            args: Prisma.LotteryClassicFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryClassicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LotteryClassicFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryClassicPayload>
          }
          findMany: {
            args: Prisma.LotteryClassicFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryClassicPayload>[]
          }
          create: {
            args: Prisma.LotteryClassicCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryClassicPayload>
          }
          createMany: {
            args: Prisma.LotteryClassicCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LotteryClassicDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryClassicPayload>
          }
          update: {
            args: Prisma.LotteryClassicUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryClassicPayload>
          }
          deleteMany: {
            args: Prisma.LotteryClassicDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LotteryClassicUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LotteryClassicUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotteryClassicPayload>
          }
          aggregate: {
            args: Prisma.LotteryClassicAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLotteryClassic>
          }
          groupBy: {
            args: Prisma.LotteryClassicGroupByArgs<ExtArgs>
            result: $Utils.Optional<LotteryClassicGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.LotteryClassicFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.LotteryClassicAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.LotteryClassicCountArgs<ExtArgs>
            result: $Utils.Optional<LotteryClassicCountAggregateOutputType> | number
          }
        }
      }
      Ticket: {
        payload: Prisma.$TicketPayload<ExtArgs>
        fields: Prisma.TicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          findFirst: {
            args: Prisma.TicketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          findMany: {
            args: Prisma.TicketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>[]
          }
          create: {
            args: Prisma.TicketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          createMany: {
            args: Prisma.TicketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TicketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          update: {
            args: Prisma.TicketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          deleteMany: {
            args: Prisma.TicketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TicketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          aggregate: {
            args: Prisma.TicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket>
          }
          groupBy: {
            args: Prisma.TicketGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TicketFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TicketAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TicketCountArgs<ExtArgs>
            result: $Utils.Optional<TicketCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TransactionFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TransactionAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    tickets: number
    ownedLotteriesLike: number
    ownedLotteriesFundraising: number
    ownedLotteriesClassic: number
    transactionHistory: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | UserCountOutputTypeCountTicketsArgs
    ownedLotteriesLike?: boolean | UserCountOutputTypeCountOwnedLotteriesLikeArgs
    ownedLotteriesFundraising?: boolean | UserCountOutputTypeCountOwnedLotteriesFundraisingArgs
    ownedLotteriesClassic?: boolean | UserCountOutputTypeCountOwnedLotteriesClassicArgs
    transactionHistory?: boolean | UserCountOutputTypeCountTransactionHistoryArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedLotteriesLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LotteryLikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedLotteriesFundraisingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LotteryFundraisingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedLotteriesClassicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LotteryClassicWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type LotteryLikeCountOutputType
   */

  export type LotteryLikeCountOutputType = {
    tickets: number
  }

  export type LotteryLikeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | LotteryLikeCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * LotteryLikeCountOutputType without action
   */
  export type LotteryLikeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryLikeCountOutputType
     */
    select?: LotteryLikeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LotteryLikeCountOutputType without action
   */
  export type LotteryLikeCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }


  /**
   * Count Type LotteryFundraisingCountOutputType
   */

  export type LotteryFundraisingCountOutputType = {
    tickets: number
  }

  export type LotteryFundraisingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | LotteryFundraisingCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * LotteryFundraisingCountOutputType without action
   */
  export type LotteryFundraisingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryFundraisingCountOutputType
     */
    select?: LotteryFundraisingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LotteryFundraisingCountOutputType without action
   */
  export type LotteryFundraisingCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }


  /**
   * Count Type LotteryClassicCountOutputType
   */

  export type LotteryClassicCountOutputType = {
    tickets: number
  }

  export type LotteryClassicCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | LotteryClassicCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * LotteryClassicCountOutputType without action
   */
  export type LotteryClassicCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryClassicCountOutputType
     */
    select?: LotteryClassicCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LotteryClassicCountOutputType without action
   */
  export type LotteryClassicCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    balance: number | null
  }

  export type UserSumAggregateOutputType = {
    balance: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    fullName: string | null
    email: string | null
    picture: string | null
    balance: number | null
    accountStatus: $Enums.AccountStatus | null
    DataOfBirth: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    fullName: string | null
    email: string | null
    picture: string | null
    balance: number | null
    accountStatus: $Enums.AccountStatus | null
    DataOfBirth: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    fullName: number
    email: number
    picture: number
    balance: number
    accountStatus: number
    DataOfBirth: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    balance?: true
  }

  export type UserSumAggregateInputType = {
    balance?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    fullName?: true
    email?: true
    picture?: true
    balance?: true
    accountStatus?: true
    DataOfBirth?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    fullName?: true
    email?: true
    picture?: true
    balance?: true
    accountStatus?: true
    DataOfBirth?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    fullName?: true
    email?: true
    picture?: true
    balance?: true
    accountStatus?: true
    DataOfBirth?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firstName: string | null
    lastName: string | null
    fullName: string | null
    email: string
    picture: string | null
    balance: number
    accountStatus: $Enums.AccountStatus
    DataOfBirth: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    fullName?: boolean
    email?: boolean
    picture?: boolean
    balance?: boolean
    accountStatus?: boolean
    DataOfBirth?: boolean
    tickets?: boolean | User$ticketsArgs<ExtArgs>
    ownedLotteriesLike?: boolean | User$ownedLotteriesLikeArgs<ExtArgs>
    ownedLotteriesFundraising?: boolean | User$ownedLotteriesFundraisingArgs<ExtArgs>
    ownedLotteriesClassic?: boolean | User$ownedLotteriesClassicArgs<ExtArgs>
    transactionHistory?: boolean | User$transactionHistoryArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    fullName?: boolean
    email?: boolean
    picture?: boolean
    balance?: boolean
    accountStatus?: boolean
    DataOfBirth?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | User$ticketsArgs<ExtArgs>
    ownedLotteriesLike?: boolean | User$ownedLotteriesLikeArgs<ExtArgs>
    ownedLotteriesFundraising?: boolean | User$ownedLotteriesFundraisingArgs<ExtArgs>
    ownedLotteriesClassic?: boolean | User$ownedLotteriesClassicArgs<ExtArgs>
    transactionHistory?: boolean | User$transactionHistoryArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      tickets: Prisma.$TicketPayload<ExtArgs>[]
      ownedLotteriesLike: Prisma.$LotteryLikePayload<ExtArgs>[]
      ownedLotteriesFundraising: Prisma.$LotteryFundraisingPayload<ExtArgs>[]
      ownedLotteriesClassic: Prisma.$LotteryClassicPayload<ExtArgs>[]
      transactionHistory: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string | null
      lastName: string | null
      fullName: string | null
      email: string
      picture: string | null
      balance: number
      accountStatus: $Enums.AccountStatus
      DataOfBirth: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends User$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, User$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany"> | Null>
    ownedLotteriesLike<T extends User$ownedLotteriesLikeArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedLotteriesLikeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotteryLikePayload<ExtArgs>, T, "findMany"> | Null>
    ownedLotteriesFundraising<T extends User$ownedLotteriesFundraisingArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedLotteriesFundraisingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotteryFundraisingPayload<ExtArgs>, T, "findMany"> | Null>
    ownedLotteriesClassic<T extends User$ownedLotteriesClassicArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedLotteriesClassicArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotteryClassicPayload<ExtArgs>, T, "findMany"> | Null>
    transactionHistory<T extends User$transactionHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly picture: FieldRef<"User", 'String'>
    readonly balance: FieldRef<"User", 'Int'>
    readonly accountStatus: FieldRef<"User", 'AccountStatus'>
    readonly DataOfBirth: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.tickets
   */
  export type User$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * User.ownedLotteriesLike
   */
  export type User$ownedLotteriesLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryLike
     */
    select?: LotteryLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryLikeInclude<ExtArgs> | null
    where?: LotteryLikeWhereInput
    orderBy?: LotteryLikeOrderByWithRelationInput | LotteryLikeOrderByWithRelationInput[]
    cursor?: LotteryLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LotteryLikeScalarFieldEnum | LotteryLikeScalarFieldEnum[]
  }

  /**
   * User.ownedLotteriesFundraising
   */
  export type User$ownedLotteriesFundraisingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryFundraising
     */
    select?: LotteryFundraisingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryFundraisingInclude<ExtArgs> | null
    where?: LotteryFundraisingWhereInput
    orderBy?: LotteryFundraisingOrderByWithRelationInput | LotteryFundraisingOrderByWithRelationInput[]
    cursor?: LotteryFundraisingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LotteryFundraisingScalarFieldEnum | LotteryFundraisingScalarFieldEnum[]
  }

  /**
   * User.ownedLotteriesClassic
   */
  export type User$ownedLotteriesClassicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryClassic
     */
    select?: LotteryClassicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryClassicInclude<ExtArgs> | null
    where?: LotteryClassicWhereInput
    orderBy?: LotteryClassicOrderByWithRelationInput | LotteryClassicOrderByWithRelationInput[]
    cursor?: LotteryClassicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LotteryClassicScalarFieldEnum | LotteryClassicScalarFieldEnum[]
  }

  /**
   * User.transactionHistory
   */
  export type User$transactionHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model LotteryLike
   */

  export type AggregateLotteryLike = {
    _count: LotteryLikeCountAggregateOutputType | null
    _avg: LotteryLikeAvgAggregateOutputType | null
    _sum: LotteryLikeSumAggregateOutputType | null
    _min: LotteryLikeMinAggregateOutputType | null
    _max: LotteryLikeMaxAggregateOutputType | null
  }

  export type LotteryLikeAvgAggregateOutputType = {
    participantCount: number | null
  }

  export type LotteryLikeSumAggregateOutputType = {
    participantCount: number | null
  }

  export type LotteryLikeMinAggregateOutputType = {
    id: string | null
    hosted: string | null
    title: string | null
    description: string | null
    image: string | null
    paticipationdescription: string | null
    startDate: Date | null
    endDate: Date | null
    lotteryStatus: $Enums.LotteryStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    link: string | null
    ownerEmail: string | null
    participantCount: number | null
  }

  export type LotteryLikeMaxAggregateOutputType = {
    id: string | null
    hosted: string | null
    title: string | null
    description: string | null
    image: string | null
    paticipationdescription: string | null
    startDate: Date | null
    endDate: Date | null
    lotteryStatus: $Enums.LotteryStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    link: string | null
    ownerEmail: string | null
    participantCount: number | null
  }

  export type LotteryLikeCountAggregateOutputType = {
    id: number
    hosted: number
    title: number
    description: number
    image: number
    paticipationdescription: number
    startDate: number
    endDate: number
    lotteryStatus: number
    createdAt: number
    updatedAt: number
    conditions: number
    prizes: number
    link: number
    ownerEmail: number
    participantCount: number
    winnersTickets: number
    _all: number
  }


  export type LotteryLikeAvgAggregateInputType = {
    participantCount?: true
  }

  export type LotteryLikeSumAggregateInputType = {
    participantCount?: true
  }

  export type LotteryLikeMinAggregateInputType = {
    id?: true
    hosted?: true
    title?: true
    description?: true
    image?: true
    paticipationdescription?: true
    startDate?: true
    endDate?: true
    lotteryStatus?: true
    createdAt?: true
    updatedAt?: true
    link?: true
    ownerEmail?: true
    participantCount?: true
  }

  export type LotteryLikeMaxAggregateInputType = {
    id?: true
    hosted?: true
    title?: true
    description?: true
    image?: true
    paticipationdescription?: true
    startDate?: true
    endDate?: true
    lotteryStatus?: true
    createdAt?: true
    updatedAt?: true
    link?: true
    ownerEmail?: true
    participantCount?: true
  }

  export type LotteryLikeCountAggregateInputType = {
    id?: true
    hosted?: true
    title?: true
    description?: true
    image?: true
    paticipationdescription?: true
    startDate?: true
    endDate?: true
    lotteryStatus?: true
    createdAt?: true
    updatedAt?: true
    conditions?: true
    prizes?: true
    link?: true
    ownerEmail?: true
    participantCount?: true
    winnersTickets?: true
    _all?: true
  }

  export type LotteryLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LotteryLike to aggregate.
     */
    where?: LotteryLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LotteryLikes to fetch.
     */
    orderBy?: LotteryLikeOrderByWithRelationInput | LotteryLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LotteryLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LotteryLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LotteryLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LotteryLikes
    **/
    _count?: true | LotteryLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LotteryLikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LotteryLikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LotteryLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LotteryLikeMaxAggregateInputType
  }

  export type GetLotteryLikeAggregateType<T extends LotteryLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateLotteryLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLotteryLike[P]>
      : GetScalarType<T[P], AggregateLotteryLike[P]>
  }




  export type LotteryLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LotteryLikeWhereInput
    orderBy?: LotteryLikeOrderByWithAggregationInput | LotteryLikeOrderByWithAggregationInput[]
    by: LotteryLikeScalarFieldEnum[] | LotteryLikeScalarFieldEnum
    having?: LotteryLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LotteryLikeCountAggregateInputType | true
    _avg?: LotteryLikeAvgAggregateInputType
    _sum?: LotteryLikeSumAggregateInputType
    _min?: LotteryLikeMinAggregateInputType
    _max?: LotteryLikeMaxAggregateInputType
  }

  export type LotteryLikeGroupByOutputType = {
    id: string
    hosted: string
    title: string | null
    description: string | null
    image: string | null
    paticipationdescription: string | null
    startDate: Date
    endDate: Date
    lotteryStatus: $Enums.LotteryStatus
    createdAt: Date
    updatedAt: Date
    conditions: JsonValue[]
    prizes: JsonValue[]
    link: string
    ownerEmail: string
    participantCount: number | null
    winnersTickets: JsonValue | null
    _count: LotteryLikeCountAggregateOutputType | null
    _avg: LotteryLikeAvgAggregateOutputType | null
    _sum: LotteryLikeSumAggregateOutputType | null
    _min: LotteryLikeMinAggregateOutputType | null
    _max: LotteryLikeMaxAggregateOutputType | null
  }

  type GetLotteryLikeGroupByPayload<T extends LotteryLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LotteryLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LotteryLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LotteryLikeGroupByOutputType[P]>
            : GetScalarType<T[P], LotteryLikeGroupByOutputType[P]>
        }
      >
    >


  export type LotteryLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hosted?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    paticipationdescription?: boolean
    startDate?: boolean
    endDate?: boolean
    lotteryStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    conditions?: boolean
    prizes?: boolean
    link?: boolean
    ownerEmail?: boolean
    participantCount?: boolean
    winnersTickets?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    tickets?: boolean | LotteryLike$ticketsArgs<ExtArgs>
    _count?: boolean | LotteryLikeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lotteryLike"]>


  export type LotteryLikeSelectScalar = {
    id?: boolean
    hosted?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    paticipationdescription?: boolean
    startDate?: boolean
    endDate?: boolean
    lotteryStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    conditions?: boolean
    prizes?: boolean
    link?: boolean
    ownerEmail?: boolean
    participantCount?: boolean
    winnersTickets?: boolean
  }

  export type LotteryLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    tickets?: boolean | LotteryLike$ticketsArgs<ExtArgs>
    _count?: boolean | LotteryLikeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $LotteryLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LotteryLike"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      tickets: Prisma.$TicketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hosted: string
      title: string | null
      description: string | null
      image: string | null
      paticipationdescription: string | null
      startDate: Date
      endDate: Date
      lotteryStatus: $Enums.LotteryStatus
      createdAt: Date
      updatedAt: Date
      conditions: Prisma.JsonValue[]
      prizes: Prisma.JsonValue[]
      link: string
      ownerEmail: string
      participantCount: number | null
      winnersTickets: Prisma.JsonValue | null
    }, ExtArgs["result"]["lotteryLike"]>
    composites: {}
  }

  type LotteryLikeGetPayload<S extends boolean | null | undefined | LotteryLikeDefaultArgs> = $Result.GetResult<Prisma.$LotteryLikePayload, S>

  type LotteryLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LotteryLikeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LotteryLikeCountAggregateInputType | true
    }

  export interface LotteryLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LotteryLike'], meta: { name: 'LotteryLike' } }
    /**
     * Find zero or one LotteryLike that matches the filter.
     * @param {LotteryLikeFindUniqueArgs} args - Arguments to find a LotteryLike
     * @example
     * // Get one LotteryLike
     * const lotteryLike = await prisma.lotteryLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LotteryLikeFindUniqueArgs>(args: SelectSubset<T, LotteryLikeFindUniqueArgs<ExtArgs>>): Prisma__LotteryLikeClient<$Result.GetResult<Prisma.$LotteryLikePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LotteryLike that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LotteryLikeFindUniqueOrThrowArgs} args - Arguments to find a LotteryLike
     * @example
     * // Get one LotteryLike
     * const lotteryLike = await prisma.lotteryLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LotteryLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, LotteryLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LotteryLikeClient<$Result.GetResult<Prisma.$LotteryLikePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LotteryLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryLikeFindFirstArgs} args - Arguments to find a LotteryLike
     * @example
     * // Get one LotteryLike
     * const lotteryLike = await prisma.lotteryLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LotteryLikeFindFirstArgs>(args?: SelectSubset<T, LotteryLikeFindFirstArgs<ExtArgs>>): Prisma__LotteryLikeClient<$Result.GetResult<Prisma.$LotteryLikePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LotteryLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryLikeFindFirstOrThrowArgs} args - Arguments to find a LotteryLike
     * @example
     * // Get one LotteryLike
     * const lotteryLike = await prisma.lotteryLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LotteryLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, LotteryLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__LotteryLikeClient<$Result.GetResult<Prisma.$LotteryLikePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LotteryLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LotteryLikes
     * const lotteryLikes = await prisma.lotteryLike.findMany()
     * 
     * // Get first 10 LotteryLikes
     * const lotteryLikes = await prisma.lotteryLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lotteryLikeWithIdOnly = await prisma.lotteryLike.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LotteryLikeFindManyArgs>(args?: SelectSubset<T, LotteryLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotteryLikePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LotteryLike.
     * @param {LotteryLikeCreateArgs} args - Arguments to create a LotteryLike.
     * @example
     * // Create one LotteryLike
     * const LotteryLike = await prisma.lotteryLike.create({
     *   data: {
     *     // ... data to create a LotteryLike
     *   }
     * })
     * 
     */
    create<T extends LotteryLikeCreateArgs>(args: SelectSubset<T, LotteryLikeCreateArgs<ExtArgs>>): Prisma__LotteryLikeClient<$Result.GetResult<Prisma.$LotteryLikePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LotteryLikes.
     * @param {LotteryLikeCreateManyArgs} args - Arguments to create many LotteryLikes.
     * @example
     * // Create many LotteryLikes
     * const lotteryLike = await prisma.lotteryLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LotteryLikeCreateManyArgs>(args?: SelectSubset<T, LotteryLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LotteryLike.
     * @param {LotteryLikeDeleteArgs} args - Arguments to delete one LotteryLike.
     * @example
     * // Delete one LotteryLike
     * const LotteryLike = await prisma.lotteryLike.delete({
     *   where: {
     *     // ... filter to delete one LotteryLike
     *   }
     * })
     * 
     */
    delete<T extends LotteryLikeDeleteArgs>(args: SelectSubset<T, LotteryLikeDeleteArgs<ExtArgs>>): Prisma__LotteryLikeClient<$Result.GetResult<Prisma.$LotteryLikePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LotteryLike.
     * @param {LotteryLikeUpdateArgs} args - Arguments to update one LotteryLike.
     * @example
     * // Update one LotteryLike
     * const lotteryLike = await prisma.lotteryLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LotteryLikeUpdateArgs>(args: SelectSubset<T, LotteryLikeUpdateArgs<ExtArgs>>): Prisma__LotteryLikeClient<$Result.GetResult<Prisma.$LotteryLikePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LotteryLikes.
     * @param {LotteryLikeDeleteManyArgs} args - Arguments to filter LotteryLikes to delete.
     * @example
     * // Delete a few LotteryLikes
     * const { count } = await prisma.lotteryLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LotteryLikeDeleteManyArgs>(args?: SelectSubset<T, LotteryLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LotteryLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LotteryLikes
     * const lotteryLike = await prisma.lotteryLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LotteryLikeUpdateManyArgs>(args: SelectSubset<T, LotteryLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LotteryLike.
     * @param {LotteryLikeUpsertArgs} args - Arguments to update or create a LotteryLike.
     * @example
     * // Update or create a LotteryLike
     * const lotteryLike = await prisma.lotteryLike.upsert({
     *   create: {
     *     // ... data to create a LotteryLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LotteryLike we want to update
     *   }
     * })
     */
    upsert<T extends LotteryLikeUpsertArgs>(args: SelectSubset<T, LotteryLikeUpsertArgs<ExtArgs>>): Prisma__LotteryLikeClient<$Result.GetResult<Prisma.$LotteryLikePayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more LotteryLikes that matches the filter.
     * @param {LotteryLikeFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const lotteryLike = await prisma.lotteryLike.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: LotteryLikeFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a LotteryLike.
     * @param {LotteryLikeAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const lotteryLike = await prisma.lotteryLike.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: LotteryLikeAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of LotteryLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryLikeCountArgs} args - Arguments to filter LotteryLikes to count.
     * @example
     * // Count the number of LotteryLikes
     * const count = await prisma.lotteryLike.count({
     *   where: {
     *     // ... the filter for the LotteryLikes we want to count
     *   }
     * })
    **/
    count<T extends LotteryLikeCountArgs>(
      args?: Subset<T, LotteryLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LotteryLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LotteryLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LotteryLikeAggregateArgs>(args: Subset<T, LotteryLikeAggregateArgs>): Prisma.PrismaPromise<GetLotteryLikeAggregateType<T>>

    /**
     * Group by LotteryLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LotteryLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LotteryLikeGroupByArgs['orderBy'] }
        : { orderBy?: LotteryLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LotteryLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLotteryLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LotteryLike model
   */
  readonly fields: LotteryLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LotteryLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LotteryLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tickets<T extends LotteryLike$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, LotteryLike$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LotteryLike model
   */ 
  interface LotteryLikeFieldRefs {
    readonly id: FieldRef<"LotteryLike", 'String'>
    readonly hosted: FieldRef<"LotteryLike", 'String'>
    readonly title: FieldRef<"LotteryLike", 'String'>
    readonly description: FieldRef<"LotteryLike", 'String'>
    readonly image: FieldRef<"LotteryLike", 'String'>
    readonly paticipationdescription: FieldRef<"LotteryLike", 'String'>
    readonly startDate: FieldRef<"LotteryLike", 'DateTime'>
    readonly endDate: FieldRef<"LotteryLike", 'DateTime'>
    readonly lotteryStatus: FieldRef<"LotteryLike", 'LotteryStatus'>
    readonly createdAt: FieldRef<"LotteryLike", 'DateTime'>
    readonly updatedAt: FieldRef<"LotteryLike", 'DateTime'>
    readonly conditions: FieldRef<"LotteryLike", 'Json[]'>
    readonly prizes: FieldRef<"LotteryLike", 'Json[]'>
    readonly link: FieldRef<"LotteryLike", 'String'>
    readonly ownerEmail: FieldRef<"LotteryLike", 'String'>
    readonly participantCount: FieldRef<"LotteryLike", 'Int'>
    readonly winnersTickets: FieldRef<"LotteryLike", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * LotteryLike findUnique
   */
  export type LotteryLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryLike
     */
    select?: LotteryLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryLikeInclude<ExtArgs> | null
    /**
     * Filter, which LotteryLike to fetch.
     */
    where: LotteryLikeWhereUniqueInput
  }

  /**
   * LotteryLike findUniqueOrThrow
   */
  export type LotteryLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryLike
     */
    select?: LotteryLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryLikeInclude<ExtArgs> | null
    /**
     * Filter, which LotteryLike to fetch.
     */
    where: LotteryLikeWhereUniqueInput
  }

  /**
   * LotteryLike findFirst
   */
  export type LotteryLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryLike
     */
    select?: LotteryLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryLikeInclude<ExtArgs> | null
    /**
     * Filter, which LotteryLike to fetch.
     */
    where?: LotteryLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LotteryLikes to fetch.
     */
    orderBy?: LotteryLikeOrderByWithRelationInput | LotteryLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LotteryLikes.
     */
    cursor?: LotteryLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LotteryLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LotteryLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LotteryLikes.
     */
    distinct?: LotteryLikeScalarFieldEnum | LotteryLikeScalarFieldEnum[]
  }

  /**
   * LotteryLike findFirstOrThrow
   */
  export type LotteryLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryLike
     */
    select?: LotteryLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryLikeInclude<ExtArgs> | null
    /**
     * Filter, which LotteryLike to fetch.
     */
    where?: LotteryLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LotteryLikes to fetch.
     */
    orderBy?: LotteryLikeOrderByWithRelationInput | LotteryLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LotteryLikes.
     */
    cursor?: LotteryLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LotteryLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LotteryLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LotteryLikes.
     */
    distinct?: LotteryLikeScalarFieldEnum | LotteryLikeScalarFieldEnum[]
  }

  /**
   * LotteryLike findMany
   */
  export type LotteryLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryLike
     */
    select?: LotteryLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryLikeInclude<ExtArgs> | null
    /**
     * Filter, which LotteryLikes to fetch.
     */
    where?: LotteryLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LotteryLikes to fetch.
     */
    orderBy?: LotteryLikeOrderByWithRelationInput | LotteryLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LotteryLikes.
     */
    cursor?: LotteryLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LotteryLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LotteryLikes.
     */
    skip?: number
    distinct?: LotteryLikeScalarFieldEnum | LotteryLikeScalarFieldEnum[]
  }

  /**
   * LotteryLike create
   */
  export type LotteryLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryLike
     */
    select?: LotteryLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a LotteryLike.
     */
    data: XOR<LotteryLikeCreateInput, LotteryLikeUncheckedCreateInput>
  }

  /**
   * LotteryLike createMany
   */
  export type LotteryLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LotteryLikes.
     */
    data: LotteryLikeCreateManyInput | LotteryLikeCreateManyInput[]
  }

  /**
   * LotteryLike update
   */
  export type LotteryLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryLike
     */
    select?: LotteryLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a LotteryLike.
     */
    data: XOR<LotteryLikeUpdateInput, LotteryLikeUncheckedUpdateInput>
    /**
     * Choose, which LotteryLike to update.
     */
    where: LotteryLikeWhereUniqueInput
  }

  /**
   * LotteryLike updateMany
   */
  export type LotteryLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LotteryLikes.
     */
    data: XOR<LotteryLikeUpdateManyMutationInput, LotteryLikeUncheckedUpdateManyInput>
    /**
     * Filter which LotteryLikes to update
     */
    where?: LotteryLikeWhereInput
  }

  /**
   * LotteryLike upsert
   */
  export type LotteryLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryLike
     */
    select?: LotteryLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the LotteryLike to update in case it exists.
     */
    where: LotteryLikeWhereUniqueInput
    /**
     * In case the LotteryLike found by the `where` argument doesn't exist, create a new LotteryLike with this data.
     */
    create: XOR<LotteryLikeCreateInput, LotteryLikeUncheckedCreateInput>
    /**
     * In case the LotteryLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LotteryLikeUpdateInput, LotteryLikeUncheckedUpdateInput>
  }

  /**
   * LotteryLike delete
   */
  export type LotteryLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryLike
     */
    select?: LotteryLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryLikeInclude<ExtArgs> | null
    /**
     * Filter which LotteryLike to delete.
     */
    where: LotteryLikeWhereUniqueInput
  }

  /**
   * LotteryLike deleteMany
   */
  export type LotteryLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LotteryLikes to delete
     */
    where?: LotteryLikeWhereInput
  }

  /**
   * LotteryLike findRaw
   */
  export type LotteryLikeFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * LotteryLike aggregateRaw
   */
  export type LotteryLikeAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * LotteryLike.tickets
   */
  export type LotteryLike$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * LotteryLike without action
   */
  export type LotteryLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryLike
     */
    select?: LotteryLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryLikeInclude<ExtArgs> | null
  }


  /**
   * Model LotteryFundraising
   */

  export type AggregateLotteryFundraising = {
    _count: LotteryFundraisingCountAggregateOutputType | null
    _avg: LotteryFundraisingAvgAggregateOutputType | null
    _sum: LotteryFundraisingSumAggregateOutputType | null
    _min: LotteryFundraisingMinAggregateOutputType | null
    _max: LotteryFundraisingMaxAggregateOutputType | null
  }

  export type LotteryFundraisingAvgAggregateOutputType = {
    price: number | null
    participantCount: number | null
  }

  export type LotteryFundraisingSumAggregateOutputType = {
    price: number | null
    participantCount: number | null
  }

  export type LotteryFundraisingMinAggregateOutputType = {
    id: string | null
    hosted: string | null
    title: string | null
    description: string | null
    image: string | null
    paticipationdescription: string | null
    startDate: Date | null
    endDate: Date | null
    lotteryStatus: $Enums.LotteryStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    price: number | null
    ownerEmail: string | null
    participantCount: number | null
  }

  export type LotteryFundraisingMaxAggregateOutputType = {
    id: string | null
    hosted: string | null
    title: string | null
    description: string | null
    image: string | null
    paticipationdescription: string | null
    startDate: Date | null
    endDate: Date | null
    lotteryStatus: $Enums.LotteryStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    price: number | null
    ownerEmail: string | null
    participantCount: number | null
  }

  export type LotteryFundraisingCountAggregateOutputType = {
    id: number
    hosted: number
    title: number
    description: number
    image: number
    paticipationdescription: number
    startDate: number
    endDate: number
    lotteryStatus: number
    createdAt: number
    updatedAt: number
    price: number
    prizes: number
    ownerEmail: number
    participantCount: number
    winnersTickets: number
    _all: number
  }


  export type LotteryFundraisingAvgAggregateInputType = {
    price?: true
    participantCount?: true
  }

  export type LotteryFundraisingSumAggregateInputType = {
    price?: true
    participantCount?: true
  }

  export type LotteryFundraisingMinAggregateInputType = {
    id?: true
    hosted?: true
    title?: true
    description?: true
    image?: true
    paticipationdescription?: true
    startDate?: true
    endDate?: true
    lotteryStatus?: true
    createdAt?: true
    updatedAt?: true
    price?: true
    ownerEmail?: true
    participantCount?: true
  }

  export type LotteryFundraisingMaxAggregateInputType = {
    id?: true
    hosted?: true
    title?: true
    description?: true
    image?: true
    paticipationdescription?: true
    startDate?: true
    endDate?: true
    lotteryStatus?: true
    createdAt?: true
    updatedAt?: true
    price?: true
    ownerEmail?: true
    participantCount?: true
  }

  export type LotteryFundraisingCountAggregateInputType = {
    id?: true
    hosted?: true
    title?: true
    description?: true
    image?: true
    paticipationdescription?: true
    startDate?: true
    endDate?: true
    lotteryStatus?: true
    createdAt?: true
    updatedAt?: true
    price?: true
    prizes?: true
    ownerEmail?: true
    participantCount?: true
    winnersTickets?: true
    _all?: true
  }

  export type LotteryFundraisingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LotteryFundraising to aggregate.
     */
    where?: LotteryFundraisingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LotteryFundraisings to fetch.
     */
    orderBy?: LotteryFundraisingOrderByWithRelationInput | LotteryFundraisingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LotteryFundraisingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LotteryFundraisings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LotteryFundraisings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LotteryFundraisings
    **/
    _count?: true | LotteryFundraisingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LotteryFundraisingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LotteryFundraisingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LotteryFundraisingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LotteryFundraisingMaxAggregateInputType
  }

  export type GetLotteryFundraisingAggregateType<T extends LotteryFundraisingAggregateArgs> = {
        [P in keyof T & keyof AggregateLotteryFundraising]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLotteryFundraising[P]>
      : GetScalarType<T[P], AggregateLotteryFundraising[P]>
  }




  export type LotteryFundraisingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LotteryFundraisingWhereInput
    orderBy?: LotteryFundraisingOrderByWithAggregationInput | LotteryFundraisingOrderByWithAggregationInput[]
    by: LotteryFundraisingScalarFieldEnum[] | LotteryFundraisingScalarFieldEnum
    having?: LotteryFundraisingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LotteryFundraisingCountAggregateInputType | true
    _avg?: LotteryFundraisingAvgAggregateInputType
    _sum?: LotteryFundraisingSumAggregateInputType
    _min?: LotteryFundraisingMinAggregateInputType
    _max?: LotteryFundraisingMaxAggregateInputType
  }

  export type LotteryFundraisingGroupByOutputType = {
    id: string
    hosted: string
    title: string | null
    description: string | null
    image: string | null
    paticipationdescription: string | null
    startDate: Date
    endDate: Date
    lotteryStatus: $Enums.LotteryStatus
    createdAt: Date
    updatedAt: Date
    price: number
    prizes: JsonValue[]
    ownerEmail: string
    participantCount: number | null
    winnersTickets: JsonValue | null
    _count: LotteryFundraisingCountAggregateOutputType | null
    _avg: LotteryFundraisingAvgAggregateOutputType | null
    _sum: LotteryFundraisingSumAggregateOutputType | null
    _min: LotteryFundraisingMinAggregateOutputType | null
    _max: LotteryFundraisingMaxAggregateOutputType | null
  }

  type GetLotteryFundraisingGroupByPayload<T extends LotteryFundraisingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LotteryFundraisingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LotteryFundraisingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LotteryFundraisingGroupByOutputType[P]>
            : GetScalarType<T[P], LotteryFundraisingGroupByOutputType[P]>
        }
      >
    >


  export type LotteryFundraisingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hosted?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    paticipationdescription?: boolean
    startDate?: boolean
    endDate?: boolean
    lotteryStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    price?: boolean
    prizes?: boolean
    ownerEmail?: boolean
    participantCount?: boolean
    winnersTickets?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    tickets?: boolean | LotteryFundraising$ticketsArgs<ExtArgs>
    _count?: boolean | LotteryFundraisingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lotteryFundraising"]>


  export type LotteryFundraisingSelectScalar = {
    id?: boolean
    hosted?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    paticipationdescription?: boolean
    startDate?: boolean
    endDate?: boolean
    lotteryStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    price?: boolean
    prizes?: boolean
    ownerEmail?: boolean
    participantCount?: boolean
    winnersTickets?: boolean
  }

  export type LotteryFundraisingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    tickets?: boolean | LotteryFundraising$ticketsArgs<ExtArgs>
    _count?: boolean | LotteryFundraisingCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $LotteryFundraisingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LotteryFundraising"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      tickets: Prisma.$TicketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hosted: string
      title: string | null
      description: string | null
      image: string | null
      paticipationdescription: string | null
      startDate: Date
      endDate: Date
      lotteryStatus: $Enums.LotteryStatus
      createdAt: Date
      updatedAt: Date
      price: number
      prizes: Prisma.JsonValue[]
      ownerEmail: string
      participantCount: number | null
      winnersTickets: Prisma.JsonValue | null
    }, ExtArgs["result"]["lotteryFundraising"]>
    composites: {}
  }

  type LotteryFundraisingGetPayload<S extends boolean | null | undefined | LotteryFundraisingDefaultArgs> = $Result.GetResult<Prisma.$LotteryFundraisingPayload, S>

  type LotteryFundraisingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LotteryFundraisingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LotteryFundraisingCountAggregateInputType | true
    }

  export interface LotteryFundraisingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LotteryFundraising'], meta: { name: 'LotteryFundraising' } }
    /**
     * Find zero or one LotteryFundraising that matches the filter.
     * @param {LotteryFundraisingFindUniqueArgs} args - Arguments to find a LotteryFundraising
     * @example
     * // Get one LotteryFundraising
     * const lotteryFundraising = await prisma.lotteryFundraising.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LotteryFundraisingFindUniqueArgs>(args: SelectSubset<T, LotteryFundraisingFindUniqueArgs<ExtArgs>>): Prisma__LotteryFundraisingClient<$Result.GetResult<Prisma.$LotteryFundraisingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LotteryFundraising that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LotteryFundraisingFindUniqueOrThrowArgs} args - Arguments to find a LotteryFundraising
     * @example
     * // Get one LotteryFundraising
     * const lotteryFundraising = await prisma.lotteryFundraising.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LotteryFundraisingFindUniqueOrThrowArgs>(args: SelectSubset<T, LotteryFundraisingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LotteryFundraisingClient<$Result.GetResult<Prisma.$LotteryFundraisingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LotteryFundraising that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryFundraisingFindFirstArgs} args - Arguments to find a LotteryFundraising
     * @example
     * // Get one LotteryFundraising
     * const lotteryFundraising = await prisma.lotteryFundraising.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LotteryFundraisingFindFirstArgs>(args?: SelectSubset<T, LotteryFundraisingFindFirstArgs<ExtArgs>>): Prisma__LotteryFundraisingClient<$Result.GetResult<Prisma.$LotteryFundraisingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LotteryFundraising that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryFundraisingFindFirstOrThrowArgs} args - Arguments to find a LotteryFundraising
     * @example
     * // Get one LotteryFundraising
     * const lotteryFundraising = await prisma.lotteryFundraising.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LotteryFundraisingFindFirstOrThrowArgs>(args?: SelectSubset<T, LotteryFundraisingFindFirstOrThrowArgs<ExtArgs>>): Prisma__LotteryFundraisingClient<$Result.GetResult<Prisma.$LotteryFundraisingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LotteryFundraisings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryFundraisingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LotteryFundraisings
     * const lotteryFundraisings = await prisma.lotteryFundraising.findMany()
     * 
     * // Get first 10 LotteryFundraisings
     * const lotteryFundraisings = await prisma.lotteryFundraising.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lotteryFundraisingWithIdOnly = await prisma.lotteryFundraising.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LotteryFundraisingFindManyArgs>(args?: SelectSubset<T, LotteryFundraisingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotteryFundraisingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LotteryFundraising.
     * @param {LotteryFundraisingCreateArgs} args - Arguments to create a LotteryFundraising.
     * @example
     * // Create one LotteryFundraising
     * const LotteryFundraising = await prisma.lotteryFundraising.create({
     *   data: {
     *     // ... data to create a LotteryFundraising
     *   }
     * })
     * 
     */
    create<T extends LotteryFundraisingCreateArgs>(args: SelectSubset<T, LotteryFundraisingCreateArgs<ExtArgs>>): Prisma__LotteryFundraisingClient<$Result.GetResult<Prisma.$LotteryFundraisingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LotteryFundraisings.
     * @param {LotteryFundraisingCreateManyArgs} args - Arguments to create many LotteryFundraisings.
     * @example
     * // Create many LotteryFundraisings
     * const lotteryFundraising = await prisma.lotteryFundraising.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LotteryFundraisingCreateManyArgs>(args?: SelectSubset<T, LotteryFundraisingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LotteryFundraising.
     * @param {LotteryFundraisingDeleteArgs} args - Arguments to delete one LotteryFundraising.
     * @example
     * // Delete one LotteryFundraising
     * const LotteryFundraising = await prisma.lotteryFundraising.delete({
     *   where: {
     *     // ... filter to delete one LotteryFundraising
     *   }
     * })
     * 
     */
    delete<T extends LotteryFundraisingDeleteArgs>(args: SelectSubset<T, LotteryFundraisingDeleteArgs<ExtArgs>>): Prisma__LotteryFundraisingClient<$Result.GetResult<Prisma.$LotteryFundraisingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LotteryFundraising.
     * @param {LotteryFundraisingUpdateArgs} args - Arguments to update one LotteryFundraising.
     * @example
     * // Update one LotteryFundraising
     * const lotteryFundraising = await prisma.lotteryFundraising.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LotteryFundraisingUpdateArgs>(args: SelectSubset<T, LotteryFundraisingUpdateArgs<ExtArgs>>): Prisma__LotteryFundraisingClient<$Result.GetResult<Prisma.$LotteryFundraisingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LotteryFundraisings.
     * @param {LotteryFundraisingDeleteManyArgs} args - Arguments to filter LotteryFundraisings to delete.
     * @example
     * // Delete a few LotteryFundraisings
     * const { count } = await prisma.lotteryFundraising.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LotteryFundraisingDeleteManyArgs>(args?: SelectSubset<T, LotteryFundraisingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LotteryFundraisings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryFundraisingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LotteryFundraisings
     * const lotteryFundraising = await prisma.lotteryFundraising.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LotteryFundraisingUpdateManyArgs>(args: SelectSubset<T, LotteryFundraisingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LotteryFundraising.
     * @param {LotteryFundraisingUpsertArgs} args - Arguments to update or create a LotteryFundraising.
     * @example
     * // Update or create a LotteryFundraising
     * const lotteryFundraising = await prisma.lotteryFundraising.upsert({
     *   create: {
     *     // ... data to create a LotteryFundraising
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LotteryFundraising we want to update
     *   }
     * })
     */
    upsert<T extends LotteryFundraisingUpsertArgs>(args: SelectSubset<T, LotteryFundraisingUpsertArgs<ExtArgs>>): Prisma__LotteryFundraisingClient<$Result.GetResult<Prisma.$LotteryFundraisingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more LotteryFundraisings that matches the filter.
     * @param {LotteryFundraisingFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const lotteryFundraising = await prisma.lotteryFundraising.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: LotteryFundraisingFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a LotteryFundraising.
     * @param {LotteryFundraisingAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const lotteryFundraising = await prisma.lotteryFundraising.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: LotteryFundraisingAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of LotteryFundraisings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryFundraisingCountArgs} args - Arguments to filter LotteryFundraisings to count.
     * @example
     * // Count the number of LotteryFundraisings
     * const count = await prisma.lotteryFundraising.count({
     *   where: {
     *     // ... the filter for the LotteryFundraisings we want to count
     *   }
     * })
    **/
    count<T extends LotteryFundraisingCountArgs>(
      args?: Subset<T, LotteryFundraisingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LotteryFundraisingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LotteryFundraising.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryFundraisingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LotteryFundraisingAggregateArgs>(args: Subset<T, LotteryFundraisingAggregateArgs>): Prisma.PrismaPromise<GetLotteryFundraisingAggregateType<T>>

    /**
     * Group by LotteryFundraising.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryFundraisingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LotteryFundraisingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LotteryFundraisingGroupByArgs['orderBy'] }
        : { orderBy?: LotteryFundraisingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LotteryFundraisingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLotteryFundraisingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LotteryFundraising model
   */
  readonly fields: LotteryFundraisingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LotteryFundraising.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LotteryFundraisingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tickets<T extends LotteryFundraising$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, LotteryFundraising$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LotteryFundraising model
   */ 
  interface LotteryFundraisingFieldRefs {
    readonly id: FieldRef<"LotteryFundraising", 'String'>
    readonly hosted: FieldRef<"LotteryFundraising", 'String'>
    readonly title: FieldRef<"LotteryFundraising", 'String'>
    readonly description: FieldRef<"LotteryFundraising", 'String'>
    readonly image: FieldRef<"LotteryFundraising", 'String'>
    readonly paticipationdescription: FieldRef<"LotteryFundraising", 'String'>
    readonly startDate: FieldRef<"LotteryFundraising", 'DateTime'>
    readonly endDate: FieldRef<"LotteryFundraising", 'DateTime'>
    readonly lotteryStatus: FieldRef<"LotteryFundraising", 'LotteryStatus'>
    readonly createdAt: FieldRef<"LotteryFundraising", 'DateTime'>
    readonly updatedAt: FieldRef<"LotteryFundraising", 'DateTime'>
    readonly price: FieldRef<"LotteryFundraising", 'Int'>
    readonly prizes: FieldRef<"LotteryFundraising", 'Json[]'>
    readonly ownerEmail: FieldRef<"LotteryFundraising", 'String'>
    readonly participantCount: FieldRef<"LotteryFundraising", 'Int'>
    readonly winnersTickets: FieldRef<"LotteryFundraising", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * LotteryFundraising findUnique
   */
  export type LotteryFundraisingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryFundraising
     */
    select?: LotteryFundraisingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryFundraisingInclude<ExtArgs> | null
    /**
     * Filter, which LotteryFundraising to fetch.
     */
    where: LotteryFundraisingWhereUniqueInput
  }

  /**
   * LotteryFundraising findUniqueOrThrow
   */
  export type LotteryFundraisingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryFundraising
     */
    select?: LotteryFundraisingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryFundraisingInclude<ExtArgs> | null
    /**
     * Filter, which LotteryFundraising to fetch.
     */
    where: LotteryFundraisingWhereUniqueInput
  }

  /**
   * LotteryFundraising findFirst
   */
  export type LotteryFundraisingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryFundraising
     */
    select?: LotteryFundraisingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryFundraisingInclude<ExtArgs> | null
    /**
     * Filter, which LotteryFundraising to fetch.
     */
    where?: LotteryFundraisingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LotteryFundraisings to fetch.
     */
    orderBy?: LotteryFundraisingOrderByWithRelationInput | LotteryFundraisingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LotteryFundraisings.
     */
    cursor?: LotteryFundraisingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LotteryFundraisings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LotteryFundraisings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LotteryFundraisings.
     */
    distinct?: LotteryFundraisingScalarFieldEnum | LotteryFundraisingScalarFieldEnum[]
  }

  /**
   * LotteryFundraising findFirstOrThrow
   */
  export type LotteryFundraisingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryFundraising
     */
    select?: LotteryFundraisingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryFundraisingInclude<ExtArgs> | null
    /**
     * Filter, which LotteryFundraising to fetch.
     */
    where?: LotteryFundraisingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LotteryFundraisings to fetch.
     */
    orderBy?: LotteryFundraisingOrderByWithRelationInput | LotteryFundraisingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LotteryFundraisings.
     */
    cursor?: LotteryFundraisingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LotteryFundraisings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LotteryFundraisings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LotteryFundraisings.
     */
    distinct?: LotteryFundraisingScalarFieldEnum | LotteryFundraisingScalarFieldEnum[]
  }

  /**
   * LotteryFundraising findMany
   */
  export type LotteryFundraisingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryFundraising
     */
    select?: LotteryFundraisingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryFundraisingInclude<ExtArgs> | null
    /**
     * Filter, which LotteryFundraisings to fetch.
     */
    where?: LotteryFundraisingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LotteryFundraisings to fetch.
     */
    orderBy?: LotteryFundraisingOrderByWithRelationInput | LotteryFundraisingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LotteryFundraisings.
     */
    cursor?: LotteryFundraisingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LotteryFundraisings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LotteryFundraisings.
     */
    skip?: number
    distinct?: LotteryFundraisingScalarFieldEnum | LotteryFundraisingScalarFieldEnum[]
  }

  /**
   * LotteryFundraising create
   */
  export type LotteryFundraisingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryFundraising
     */
    select?: LotteryFundraisingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryFundraisingInclude<ExtArgs> | null
    /**
     * The data needed to create a LotteryFundraising.
     */
    data: XOR<LotteryFundraisingCreateInput, LotteryFundraisingUncheckedCreateInput>
  }

  /**
   * LotteryFundraising createMany
   */
  export type LotteryFundraisingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LotteryFundraisings.
     */
    data: LotteryFundraisingCreateManyInput | LotteryFundraisingCreateManyInput[]
  }

  /**
   * LotteryFundraising update
   */
  export type LotteryFundraisingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryFundraising
     */
    select?: LotteryFundraisingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryFundraisingInclude<ExtArgs> | null
    /**
     * The data needed to update a LotteryFundraising.
     */
    data: XOR<LotteryFundraisingUpdateInput, LotteryFundraisingUncheckedUpdateInput>
    /**
     * Choose, which LotteryFundraising to update.
     */
    where: LotteryFundraisingWhereUniqueInput
  }

  /**
   * LotteryFundraising updateMany
   */
  export type LotteryFundraisingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LotteryFundraisings.
     */
    data: XOR<LotteryFundraisingUpdateManyMutationInput, LotteryFundraisingUncheckedUpdateManyInput>
    /**
     * Filter which LotteryFundraisings to update
     */
    where?: LotteryFundraisingWhereInput
  }

  /**
   * LotteryFundraising upsert
   */
  export type LotteryFundraisingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryFundraising
     */
    select?: LotteryFundraisingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryFundraisingInclude<ExtArgs> | null
    /**
     * The filter to search for the LotteryFundraising to update in case it exists.
     */
    where: LotteryFundraisingWhereUniqueInput
    /**
     * In case the LotteryFundraising found by the `where` argument doesn't exist, create a new LotteryFundraising with this data.
     */
    create: XOR<LotteryFundraisingCreateInput, LotteryFundraisingUncheckedCreateInput>
    /**
     * In case the LotteryFundraising was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LotteryFundraisingUpdateInput, LotteryFundraisingUncheckedUpdateInput>
  }

  /**
   * LotteryFundraising delete
   */
  export type LotteryFundraisingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryFundraising
     */
    select?: LotteryFundraisingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryFundraisingInclude<ExtArgs> | null
    /**
     * Filter which LotteryFundraising to delete.
     */
    where: LotteryFundraisingWhereUniqueInput
  }

  /**
   * LotteryFundraising deleteMany
   */
  export type LotteryFundraisingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LotteryFundraisings to delete
     */
    where?: LotteryFundraisingWhereInput
  }

  /**
   * LotteryFundraising findRaw
   */
  export type LotteryFundraisingFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * LotteryFundraising aggregateRaw
   */
  export type LotteryFundraisingAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * LotteryFundraising.tickets
   */
  export type LotteryFundraising$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * LotteryFundraising without action
   */
  export type LotteryFundraisingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryFundraising
     */
    select?: LotteryFundraisingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryFundraisingInclude<ExtArgs> | null
  }


  /**
   * Model LotteryClassic
   */

  export type AggregateLotteryClassic = {
    _count: LotteryClassicCountAggregateOutputType | null
    _avg: LotteryClassicAvgAggregateOutputType | null
    _sum: LotteryClassicSumAggregateOutputType | null
    _min: LotteryClassicMinAggregateOutputType | null
    _max: LotteryClassicMaxAggregateOutputType | null
  }

  export type LotteryClassicAvgAggregateOutputType = {
    availableNumberRange: number | null
    drawnNumbersCount: number | null
    price: number | null
    participantCount: number | null
  }

  export type LotteryClassicSumAggregateOutputType = {
    availableNumberRange: number | null
    drawnNumbersCount: number | null
    price: number | null
    participantCount: number | null
  }

  export type LotteryClassicMinAggregateOutputType = {
    id: string | null
    hosted: string | null
    title: string | null
    description: string | null
    image: string | null
    paticipationdescription: string | null
    startDate: Date | null
    endDate: Date | null
    lotteryStatus: $Enums.LotteryStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    availableNumberRange: number | null
    drawnNumbersCount: number | null
    price: number | null
    ownerEmail: string | null
    participantCount: number | null
  }

  export type LotteryClassicMaxAggregateOutputType = {
    id: string | null
    hosted: string | null
    title: string | null
    description: string | null
    image: string | null
    paticipationdescription: string | null
    startDate: Date | null
    endDate: Date | null
    lotteryStatus: $Enums.LotteryStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    availableNumberRange: number | null
    drawnNumbersCount: number | null
    price: number | null
    ownerEmail: string | null
    participantCount: number | null
  }

  export type LotteryClassicCountAggregateOutputType = {
    id: number
    hosted: number
    title: number
    description: number
    image: number
    paticipationdescription: number
    startDate: number
    endDate: number
    lotteryStatus: number
    createdAt: number
    updatedAt: number
    availableNumberRange: number
    drawnNumbersCount: number
    price: number
    prizes: number
    ownerEmail: number
    participantCount: number
    winnersTickets: number
    winningNumbers: number
    _all: number
  }


  export type LotteryClassicAvgAggregateInputType = {
    availableNumberRange?: true
    drawnNumbersCount?: true
    price?: true
    participantCount?: true
  }

  export type LotteryClassicSumAggregateInputType = {
    availableNumberRange?: true
    drawnNumbersCount?: true
    price?: true
    participantCount?: true
  }

  export type LotteryClassicMinAggregateInputType = {
    id?: true
    hosted?: true
    title?: true
    description?: true
    image?: true
    paticipationdescription?: true
    startDate?: true
    endDate?: true
    lotteryStatus?: true
    createdAt?: true
    updatedAt?: true
    availableNumberRange?: true
    drawnNumbersCount?: true
    price?: true
    ownerEmail?: true
    participantCount?: true
  }

  export type LotteryClassicMaxAggregateInputType = {
    id?: true
    hosted?: true
    title?: true
    description?: true
    image?: true
    paticipationdescription?: true
    startDate?: true
    endDate?: true
    lotteryStatus?: true
    createdAt?: true
    updatedAt?: true
    availableNumberRange?: true
    drawnNumbersCount?: true
    price?: true
    ownerEmail?: true
    participantCount?: true
  }

  export type LotteryClassicCountAggregateInputType = {
    id?: true
    hosted?: true
    title?: true
    description?: true
    image?: true
    paticipationdescription?: true
    startDate?: true
    endDate?: true
    lotteryStatus?: true
    createdAt?: true
    updatedAt?: true
    availableNumberRange?: true
    drawnNumbersCount?: true
    price?: true
    prizes?: true
    ownerEmail?: true
    participantCount?: true
    winnersTickets?: true
    winningNumbers?: true
    _all?: true
  }

  export type LotteryClassicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LotteryClassic to aggregate.
     */
    where?: LotteryClassicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LotteryClassics to fetch.
     */
    orderBy?: LotteryClassicOrderByWithRelationInput | LotteryClassicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LotteryClassicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LotteryClassics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LotteryClassics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LotteryClassics
    **/
    _count?: true | LotteryClassicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LotteryClassicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LotteryClassicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LotteryClassicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LotteryClassicMaxAggregateInputType
  }

  export type GetLotteryClassicAggregateType<T extends LotteryClassicAggregateArgs> = {
        [P in keyof T & keyof AggregateLotteryClassic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLotteryClassic[P]>
      : GetScalarType<T[P], AggregateLotteryClassic[P]>
  }




  export type LotteryClassicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LotteryClassicWhereInput
    orderBy?: LotteryClassicOrderByWithAggregationInput | LotteryClassicOrderByWithAggregationInput[]
    by: LotteryClassicScalarFieldEnum[] | LotteryClassicScalarFieldEnum
    having?: LotteryClassicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LotteryClassicCountAggregateInputType | true
    _avg?: LotteryClassicAvgAggregateInputType
    _sum?: LotteryClassicSumAggregateInputType
    _min?: LotteryClassicMinAggregateInputType
    _max?: LotteryClassicMaxAggregateInputType
  }

  export type LotteryClassicGroupByOutputType = {
    id: string
    hosted: string
    title: string | null
    description: string | null
    image: string | null
    paticipationdescription: string | null
    startDate: Date
    endDate: Date
    lotteryStatus: $Enums.LotteryStatus
    createdAt: Date
    updatedAt: Date
    availableNumberRange: number
    drawnNumbersCount: number
    price: number
    prizes: JsonValue[]
    ownerEmail: string
    participantCount: number | null
    winnersTickets: JsonValue | null
    winningNumbers: JsonValue | null
    _count: LotteryClassicCountAggregateOutputType | null
    _avg: LotteryClassicAvgAggregateOutputType | null
    _sum: LotteryClassicSumAggregateOutputType | null
    _min: LotteryClassicMinAggregateOutputType | null
    _max: LotteryClassicMaxAggregateOutputType | null
  }

  type GetLotteryClassicGroupByPayload<T extends LotteryClassicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LotteryClassicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LotteryClassicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LotteryClassicGroupByOutputType[P]>
            : GetScalarType<T[P], LotteryClassicGroupByOutputType[P]>
        }
      >
    >


  export type LotteryClassicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hosted?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    paticipationdescription?: boolean
    startDate?: boolean
    endDate?: boolean
    lotteryStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    availableNumberRange?: boolean
    drawnNumbersCount?: boolean
    price?: boolean
    prizes?: boolean
    ownerEmail?: boolean
    participantCount?: boolean
    winnersTickets?: boolean
    winningNumbers?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    tickets?: boolean | LotteryClassic$ticketsArgs<ExtArgs>
    _count?: boolean | LotteryClassicCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lotteryClassic"]>


  export type LotteryClassicSelectScalar = {
    id?: boolean
    hosted?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    paticipationdescription?: boolean
    startDate?: boolean
    endDate?: boolean
    lotteryStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    availableNumberRange?: boolean
    drawnNumbersCount?: boolean
    price?: boolean
    prizes?: boolean
    ownerEmail?: boolean
    participantCount?: boolean
    winnersTickets?: boolean
    winningNumbers?: boolean
  }

  export type LotteryClassicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    tickets?: boolean | LotteryClassic$ticketsArgs<ExtArgs>
    _count?: boolean | LotteryClassicCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $LotteryClassicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LotteryClassic"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      tickets: Prisma.$TicketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hosted: string
      title: string | null
      description: string | null
      image: string | null
      paticipationdescription: string | null
      startDate: Date
      endDate: Date
      lotteryStatus: $Enums.LotteryStatus
      createdAt: Date
      updatedAt: Date
      availableNumberRange: number
      drawnNumbersCount: number
      price: number
      prizes: Prisma.JsonValue[]
      ownerEmail: string
      participantCount: number | null
      winnersTickets: Prisma.JsonValue | null
      winningNumbers: Prisma.JsonValue | null
    }, ExtArgs["result"]["lotteryClassic"]>
    composites: {}
  }

  type LotteryClassicGetPayload<S extends boolean | null | undefined | LotteryClassicDefaultArgs> = $Result.GetResult<Prisma.$LotteryClassicPayload, S>

  type LotteryClassicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LotteryClassicFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LotteryClassicCountAggregateInputType | true
    }

  export interface LotteryClassicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LotteryClassic'], meta: { name: 'LotteryClassic' } }
    /**
     * Find zero or one LotteryClassic that matches the filter.
     * @param {LotteryClassicFindUniqueArgs} args - Arguments to find a LotteryClassic
     * @example
     * // Get one LotteryClassic
     * const lotteryClassic = await prisma.lotteryClassic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LotteryClassicFindUniqueArgs>(args: SelectSubset<T, LotteryClassicFindUniqueArgs<ExtArgs>>): Prisma__LotteryClassicClient<$Result.GetResult<Prisma.$LotteryClassicPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LotteryClassic that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LotteryClassicFindUniqueOrThrowArgs} args - Arguments to find a LotteryClassic
     * @example
     * // Get one LotteryClassic
     * const lotteryClassic = await prisma.lotteryClassic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LotteryClassicFindUniqueOrThrowArgs>(args: SelectSubset<T, LotteryClassicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LotteryClassicClient<$Result.GetResult<Prisma.$LotteryClassicPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LotteryClassic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryClassicFindFirstArgs} args - Arguments to find a LotteryClassic
     * @example
     * // Get one LotteryClassic
     * const lotteryClassic = await prisma.lotteryClassic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LotteryClassicFindFirstArgs>(args?: SelectSubset<T, LotteryClassicFindFirstArgs<ExtArgs>>): Prisma__LotteryClassicClient<$Result.GetResult<Prisma.$LotteryClassicPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LotteryClassic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryClassicFindFirstOrThrowArgs} args - Arguments to find a LotteryClassic
     * @example
     * // Get one LotteryClassic
     * const lotteryClassic = await prisma.lotteryClassic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LotteryClassicFindFirstOrThrowArgs>(args?: SelectSubset<T, LotteryClassicFindFirstOrThrowArgs<ExtArgs>>): Prisma__LotteryClassicClient<$Result.GetResult<Prisma.$LotteryClassicPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LotteryClassics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryClassicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LotteryClassics
     * const lotteryClassics = await prisma.lotteryClassic.findMany()
     * 
     * // Get first 10 LotteryClassics
     * const lotteryClassics = await prisma.lotteryClassic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lotteryClassicWithIdOnly = await prisma.lotteryClassic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LotteryClassicFindManyArgs>(args?: SelectSubset<T, LotteryClassicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotteryClassicPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LotteryClassic.
     * @param {LotteryClassicCreateArgs} args - Arguments to create a LotteryClassic.
     * @example
     * // Create one LotteryClassic
     * const LotteryClassic = await prisma.lotteryClassic.create({
     *   data: {
     *     // ... data to create a LotteryClassic
     *   }
     * })
     * 
     */
    create<T extends LotteryClassicCreateArgs>(args: SelectSubset<T, LotteryClassicCreateArgs<ExtArgs>>): Prisma__LotteryClassicClient<$Result.GetResult<Prisma.$LotteryClassicPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LotteryClassics.
     * @param {LotteryClassicCreateManyArgs} args - Arguments to create many LotteryClassics.
     * @example
     * // Create many LotteryClassics
     * const lotteryClassic = await prisma.lotteryClassic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LotteryClassicCreateManyArgs>(args?: SelectSubset<T, LotteryClassicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LotteryClassic.
     * @param {LotteryClassicDeleteArgs} args - Arguments to delete one LotteryClassic.
     * @example
     * // Delete one LotteryClassic
     * const LotteryClassic = await prisma.lotteryClassic.delete({
     *   where: {
     *     // ... filter to delete one LotteryClassic
     *   }
     * })
     * 
     */
    delete<T extends LotteryClassicDeleteArgs>(args: SelectSubset<T, LotteryClassicDeleteArgs<ExtArgs>>): Prisma__LotteryClassicClient<$Result.GetResult<Prisma.$LotteryClassicPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LotteryClassic.
     * @param {LotteryClassicUpdateArgs} args - Arguments to update one LotteryClassic.
     * @example
     * // Update one LotteryClassic
     * const lotteryClassic = await prisma.lotteryClassic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LotteryClassicUpdateArgs>(args: SelectSubset<T, LotteryClassicUpdateArgs<ExtArgs>>): Prisma__LotteryClassicClient<$Result.GetResult<Prisma.$LotteryClassicPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LotteryClassics.
     * @param {LotteryClassicDeleteManyArgs} args - Arguments to filter LotteryClassics to delete.
     * @example
     * // Delete a few LotteryClassics
     * const { count } = await prisma.lotteryClassic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LotteryClassicDeleteManyArgs>(args?: SelectSubset<T, LotteryClassicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LotteryClassics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryClassicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LotteryClassics
     * const lotteryClassic = await prisma.lotteryClassic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LotteryClassicUpdateManyArgs>(args: SelectSubset<T, LotteryClassicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LotteryClassic.
     * @param {LotteryClassicUpsertArgs} args - Arguments to update or create a LotteryClassic.
     * @example
     * // Update or create a LotteryClassic
     * const lotteryClassic = await prisma.lotteryClassic.upsert({
     *   create: {
     *     // ... data to create a LotteryClassic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LotteryClassic we want to update
     *   }
     * })
     */
    upsert<T extends LotteryClassicUpsertArgs>(args: SelectSubset<T, LotteryClassicUpsertArgs<ExtArgs>>): Prisma__LotteryClassicClient<$Result.GetResult<Prisma.$LotteryClassicPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more LotteryClassics that matches the filter.
     * @param {LotteryClassicFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const lotteryClassic = await prisma.lotteryClassic.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: LotteryClassicFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a LotteryClassic.
     * @param {LotteryClassicAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const lotteryClassic = await prisma.lotteryClassic.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: LotteryClassicAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of LotteryClassics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryClassicCountArgs} args - Arguments to filter LotteryClassics to count.
     * @example
     * // Count the number of LotteryClassics
     * const count = await prisma.lotteryClassic.count({
     *   where: {
     *     // ... the filter for the LotteryClassics we want to count
     *   }
     * })
    **/
    count<T extends LotteryClassicCountArgs>(
      args?: Subset<T, LotteryClassicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LotteryClassicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LotteryClassic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryClassicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LotteryClassicAggregateArgs>(args: Subset<T, LotteryClassicAggregateArgs>): Prisma.PrismaPromise<GetLotteryClassicAggregateType<T>>

    /**
     * Group by LotteryClassic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotteryClassicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LotteryClassicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LotteryClassicGroupByArgs['orderBy'] }
        : { orderBy?: LotteryClassicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LotteryClassicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLotteryClassicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LotteryClassic model
   */
  readonly fields: LotteryClassicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LotteryClassic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LotteryClassicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tickets<T extends LotteryClassic$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, LotteryClassic$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LotteryClassic model
   */ 
  interface LotteryClassicFieldRefs {
    readonly id: FieldRef<"LotteryClassic", 'String'>
    readonly hosted: FieldRef<"LotteryClassic", 'String'>
    readonly title: FieldRef<"LotteryClassic", 'String'>
    readonly description: FieldRef<"LotteryClassic", 'String'>
    readonly image: FieldRef<"LotteryClassic", 'String'>
    readonly paticipationdescription: FieldRef<"LotteryClassic", 'String'>
    readonly startDate: FieldRef<"LotteryClassic", 'DateTime'>
    readonly endDate: FieldRef<"LotteryClassic", 'DateTime'>
    readonly lotteryStatus: FieldRef<"LotteryClassic", 'LotteryStatus'>
    readonly createdAt: FieldRef<"LotteryClassic", 'DateTime'>
    readonly updatedAt: FieldRef<"LotteryClassic", 'DateTime'>
    readonly availableNumberRange: FieldRef<"LotteryClassic", 'Int'>
    readonly drawnNumbersCount: FieldRef<"LotteryClassic", 'Int'>
    readonly price: FieldRef<"LotteryClassic", 'Int'>
    readonly prizes: FieldRef<"LotteryClassic", 'Json[]'>
    readonly ownerEmail: FieldRef<"LotteryClassic", 'String'>
    readonly participantCount: FieldRef<"LotteryClassic", 'Int'>
    readonly winnersTickets: FieldRef<"LotteryClassic", 'Json'>
    readonly winningNumbers: FieldRef<"LotteryClassic", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * LotteryClassic findUnique
   */
  export type LotteryClassicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryClassic
     */
    select?: LotteryClassicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryClassicInclude<ExtArgs> | null
    /**
     * Filter, which LotteryClassic to fetch.
     */
    where: LotteryClassicWhereUniqueInput
  }

  /**
   * LotteryClassic findUniqueOrThrow
   */
  export type LotteryClassicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryClassic
     */
    select?: LotteryClassicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryClassicInclude<ExtArgs> | null
    /**
     * Filter, which LotteryClassic to fetch.
     */
    where: LotteryClassicWhereUniqueInput
  }

  /**
   * LotteryClassic findFirst
   */
  export type LotteryClassicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryClassic
     */
    select?: LotteryClassicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryClassicInclude<ExtArgs> | null
    /**
     * Filter, which LotteryClassic to fetch.
     */
    where?: LotteryClassicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LotteryClassics to fetch.
     */
    orderBy?: LotteryClassicOrderByWithRelationInput | LotteryClassicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LotteryClassics.
     */
    cursor?: LotteryClassicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LotteryClassics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LotteryClassics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LotteryClassics.
     */
    distinct?: LotteryClassicScalarFieldEnum | LotteryClassicScalarFieldEnum[]
  }

  /**
   * LotteryClassic findFirstOrThrow
   */
  export type LotteryClassicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryClassic
     */
    select?: LotteryClassicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryClassicInclude<ExtArgs> | null
    /**
     * Filter, which LotteryClassic to fetch.
     */
    where?: LotteryClassicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LotteryClassics to fetch.
     */
    orderBy?: LotteryClassicOrderByWithRelationInput | LotteryClassicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LotteryClassics.
     */
    cursor?: LotteryClassicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LotteryClassics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LotteryClassics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LotteryClassics.
     */
    distinct?: LotteryClassicScalarFieldEnum | LotteryClassicScalarFieldEnum[]
  }

  /**
   * LotteryClassic findMany
   */
  export type LotteryClassicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryClassic
     */
    select?: LotteryClassicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryClassicInclude<ExtArgs> | null
    /**
     * Filter, which LotteryClassics to fetch.
     */
    where?: LotteryClassicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LotteryClassics to fetch.
     */
    orderBy?: LotteryClassicOrderByWithRelationInput | LotteryClassicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LotteryClassics.
     */
    cursor?: LotteryClassicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LotteryClassics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LotteryClassics.
     */
    skip?: number
    distinct?: LotteryClassicScalarFieldEnum | LotteryClassicScalarFieldEnum[]
  }

  /**
   * LotteryClassic create
   */
  export type LotteryClassicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryClassic
     */
    select?: LotteryClassicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryClassicInclude<ExtArgs> | null
    /**
     * The data needed to create a LotteryClassic.
     */
    data: XOR<LotteryClassicCreateInput, LotteryClassicUncheckedCreateInput>
  }

  /**
   * LotteryClassic createMany
   */
  export type LotteryClassicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LotteryClassics.
     */
    data: LotteryClassicCreateManyInput | LotteryClassicCreateManyInput[]
  }

  /**
   * LotteryClassic update
   */
  export type LotteryClassicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryClassic
     */
    select?: LotteryClassicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryClassicInclude<ExtArgs> | null
    /**
     * The data needed to update a LotteryClassic.
     */
    data: XOR<LotteryClassicUpdateInput, LotteryClassicUncheckedUpdateInput>
    /**
     * Choose, which LotteryClassic to update.
     */
    where: LotteryClassicWhereUniqueInput
  }

  /**
   * LotteryClassic updateMany
   */
  export type LotteryClassicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LotteryClassics.
     */
    data: XOR<LotteryClassicUpdateManyMutationInput, LotteryClassicUncheckedUpdateManyInput>
    /**
     * Filter which LotteryClassics to update
     */
    where?: LotteryClassicWhereInput
  }

  /**
   * LotteryClassic upsert
   */
  export type LotteryClassicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryClassic
     */
    select?: LotteryClassicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryClassicInclude<ExtArgs> | null
    /**
     * The filter to search for the LotteryClassic to update in case it exists.
     */
    where: LotteryClassicWhereUniqueInput
    /**
     * In case the LotteryClassic found by the `where` argument doesn't exist, create a new LotteryClassic with this data.
     */
    create: XOR<LotteryClassicCreateInput, LotteryClassicUncheckedCreateInput>
    /**
     * In case the LotteryClassic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LotteryClassicUpdateInput, LotteryClassicUncheckedUpdateInput>
  }

  /**
   * LotteryClassic delete
   */
  export type LotteryClassicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryClassic
     */
    select?: LotteryClassicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryClassicInclude<ExtArgs> | null
    /**
     * Filter which LotteryClassic to delete.
     */
    where: LotteryClassicWhereUniqueInput
  }

  /**
   * LotteryClassic deleteMany
   */
  export type LotteryClassicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LotteryClassics to delete
     */
    where?: LotteryClassicWhereInput
  }

  /**
   * LotteryClassic findRaw
   */
  export type LotteryClassicFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * LotteryClassic aggregateRaw
   */
  export type LotteryClassicAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * LotteryClassic.tickets
   */
  export type LotteryClassic$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * LotteryClassic without action
   */
  export type LotteryClassicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryClassic
     */
    select?: LotteryClassicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryClassicInclude<ExtArgs> | null
  }


  /**
   * Model Ticket
   */

  export type AggregateTicket = {
    _count: TicketCountAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  export type TicketMinAggregateOutputType = {
    id: string | null
    lotteryType: $Enums.LotteryType | null
    lotteryId: string | null
    ticketNumber: string | null
    purchaseDate: Date | null
    status: $Enums.TicketStatus | null
    userEmail: string | null
  }

  export type TicketMaxAggregateOutputType = {
    id: string | null
    lotteryType: $Enums.LotteryType | null
    lotteryId: string | null
    ticketNumber: string | null
    purchaseDate: Date | null
    status: $Enums.TicketStatus | null
    userEmail: string | null
  }

  export type TicketCountAggregateOutputType = {
    id: number
    lotteryType: number
    lotteryId: number
    ticketNumber: number
    purchaseDate: number
    status: number
    numbers: number
    userEmail: number
    _all: number
  }


  export type TicketMinAggregateInputType = {
    id?: true
    lotteryType?: true
    lotteryId?: true
    ticketNumber?: true
    purchaseDate?: true
    status?: true
    userEmail?: true
  }

  export type TicketMaxAggregateInputType = {
    id?: true
    lotteryType?: true
    lotteryId?: true
    ticketNumber?: true
    purchaseDate?: true
    status?: true
    userEmail?: true
  }

  export type TicketCountAggregateInputType = {
    id?: true
    lotteryType?: true
    lotteryId?: true
    ticketNumber?: true
    purchaseDate?: true
    status?: true
    numbers?: true
    userEmail?: true
    _all?: true
  }

  export type TicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ticket to aggregate.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tickets
    **/
    _count?: true | TicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketMaxAggregateInputType
  }

  export type GetTicketAggregateType<T extends TicketAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket[P]>
      : GetScalarType<T[P], AggregateTicket[P]>
  }




  export type TicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithAggregationInput | TicketOrderByWithAggregationInput[]
    by: TicketScalarFieldEnum[] | TicketScalarFieldEnum
    having?: TicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketCountAggregateInputType | true
    _min?: TicketMinAggregateInputType
    _max?: TicketMaxAggregateInputType
  }

  export type TicketGroupByOutputType = {
    id: string
    lotteryType: $Enums.LotteryType
    lotteryId: string
    ticketNumber: string
    purchaseDate: Date
    status: $Enums.TicketStatus
    numbers: JsonValue | null
    userEmail: string
    _count: TicketCountAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  type GetTicketGroupByPayload<T extends TicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketGroupByOutputType[P]>
            : GetScalarType<T[P], TicketGroupByOutputType[P]>
        }
      >
    >


  export type TicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lotteryType?: boolean
    lotteryId?: boolean
    ticketNumber?: boolean
    purchaseDate?: boolean
    status?: boolean
    numbers?: boolean
    userEmail?: boolean
    lotteryClassic?: boolean | Ticket$lotteryClassicArgs<ExtArgs>
    lotteryLike?: boolean | Ticket$lotteryLikeArgs<ExtArgs>
    lotteryFundraising?: boolean | Ticket$lotteryFundraisingArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>


  export type TicketSelectScalar = {
    id?: boolean
    lotteryType?: boolean
    lotteryId?: boolean
    ticketNumber?: boolean
    purchaseDate?: boolean
    status?: boolean
    numbers?: boolean
    userEmail?: boolean
  }

  export type TicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lotteryClassic?: boolean | Ticket$lotteryClassicArgs<ExtArgs>
    lotteryLike?: boolean | Ticket$lotteryLikeArgs<ExtArgs>
    lotteryFundraising?: boolean | Ticket$lotteryFundraisingArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ticket"
    objects: {
      lotteryClassic: Prisma.$LotteryClassicPayload<ExtArgs> | null
      lotteryLike: Prisma.$LotteryLikePayload<ExtArgs> | null
      lotteryFundraising: Prisma.$LotteryFundraisingPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      lotteryType: $Enums.LotteryType
      lotteryId: string
      ticketNumber: string
      purchaseDate: Date
      status: $Enums.TicketStatus
      numbers: Prisma.JsonValue | null
      userEmail: string
    }, ExtArgs["result"]["ticket"]>
    composites: {}
  }

  type TicketGetPayload<S extends boolean | null | undefined | TicketDefaultArgs> = $Result.GetResult<Prisma.$TicketPayload, S>

  type TicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TicketFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketCountAggregateInputType | true
    }

  export interface TicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ticket'], meta: { name: 'Ticket' } }
    /**
     * Find zero or one Ticket that matches the filter.
     * @param {TicketFindUniqueArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketFindUniqueArgs>(args: SelectSubset<T, TicketFindUniqueArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ticket that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TicketFindUniqueOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ticket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketFindFirstArgs>(args?: SelectSubset<T, TicketFindFirstArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ticket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.ticket.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.ticket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketWithIdOnly = await prisma.ticket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TicketFindManyArgs>(args?: SelectSubset<T, TicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ticket.
     * @param {TicketCreateArgs} args - Arguments to create a Ticket.
     * @example
     * // Create one Ticket
     * const Ticket = await prisma.ticket.create({
     *   data: {
     *     // ... data to create a Ticket
     *   }
     * })
     * 
     */
    create<T extends TicketCreateArgs>(args: SelectSubset<T, TicketCreateArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tickets.
     * @param {TicketCreateManyArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const ticket = await prisma.ticket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketCreateManyArgs>(args?: SelectSubset<T, TicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ticket.
     * @param {TicketDeleteArgs} args - Arguments to delete one Ticket.
     * @example
     * // Delete one Ticket
     * const Ticket = await prisma.ticket.delete({
     *   where: {
     *     // ... filter to delete one Ticket
     *   }
     * })
     * 
     */
    delete<T extends TicketDeleteArgs>(args: SelectSubset<T, TicketDeleteArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ticket.
     * @param {TicketUpdateArgs} args - Arguments to update one Ticket.
     * @example
     * // Update one Ticket
     * const ticket = await prisma.ticket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketUpdateArgs>(args: SelectSubset<T, TicketUpdateArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tickets.
     * @param {TicketDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.ticket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketDeleteManyArgs>(args?: SelectSubset<T, TicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const ticket = await prisma.ticket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketUpdateManyArgs>(args: SelectSubset<T, TicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ticket.
     * @param {TicketUpsertArgs} args - Arguments to update or create a Ticket.
     * @example
     * // Update or create a Ticket
     * const ticket = await prisma.ticket.upsert({
     *   create: {
     *     // ... data to create a Ticket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket we want to update
     *   }
     * })
     */
    upsert<T extends TicketUpsertArgs>(args: SelectSubset<T, TicketUpsertArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Tickets that matches the filter.
     * @param {TicketFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const ticket = await prisma.ticket.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: TicketFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Ticket.
     * @param {TicketAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const ticket = await prisma.ticket.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TicketAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.ticket.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends TicketCountArgs>(
      args?: Subset<T, TicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketAggregateArgs>(args: Subset<T, TicketAggregateArgs>): Prisma.PrismaPromise<GetTicketAggregateType<T>>

    /**
     * Group by Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketGroupByArgs['orderBy'] }
        : { orderBy?: TicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ticket model
   */
  readonly fields: TicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ticket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lotteryClassic<T extends Ticket$lotteryClassicArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$lotteryClassicArgs<ExtArgs>>): Prisma__LotteryClassicClient<$Result.GetResult<Prisma.$LotteryClassicPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    lotteryLike<T extends Ticket$lotteryLikeArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$lotteryLikeArgs<ExtArgs>>): Prisma__LotteryLikeClient<$Result.GetResult<Prisma.$LotteryLikePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    lotteryFundraising<T extends Ticket$lotteryFundraisingArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$lotteryFundraisingArgs<ExtArgs>>): Prisma__LotteryFundraisingClient<$Result.GetResult<Prisma.$LotteryFundraisingPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ticket model
   */ 
  interface TicketFieldRefs {
    readonly id: FieldRef<"Ticket", 'String'>
    readonly lotteryType: FieldRef<"Ticket", 'LotteryType'>
    readonly lotteryId: FieldRef<"Ticket", 'String'>
    readonly ticketNumber: FieldRef<"Ticket", 'String'>
    readonly purchaseDate: FieldRef<"Ticket", 'DateTime'>
    readonly status: FieldRef<"Ticket", 'TicketStatus'>
    readonly numbers: FieldRef<"Ticket", 'Json'>
    readonly userEmail: FieldRef<"Ticket", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Ticket findUnique
   */
  export type TicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket findUniqueOrThrow
   */
  export type TicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket findFirst
   */
  export type TicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket findFirstOrThrow
   */
  export type TicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket findMany
   */
  export type TicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket create
   */
  export type TicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The data needed to create a Ticket.
     */
    data: XOR<TicketCreateInput, TicketUncheckedCreateInput>
  }

  /**
   * Ticket createMany
   */
  export type TicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tickets.
     */
    data: TicketCreateManyInput | TicketCreateManyInput[]
  }

  /**
   * Ticket update
   */
  export type TicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The data needed to update a Ticket.
     */
    data: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
    /**
     * Choose, which Ticket to update.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket updateMany
   */
  export type TicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketWhereInput
  }

  /**
   * Ticket upsert
   */
  export type TicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The filter to search for the Ticket to update in case it exists.
     */
    where: TicketWhereUniqueInput
    /**
     * In case the Ticket found by the `where` argument doesn't exist, create a new Ticket with this data.
     */
    create: XOR<TicketCreateInput, TicketUncheckedCreateInput>
    /**
     * In case the Ticket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
  }

  /**
   * Ticket delete
   */
  export type TicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter which Ticket to delete.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket deleteMany
   */
  export type TicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tickets to delete
     */
    where?: TicketWhereInput
  }

  /**
   * Ticket findRaw
   */
  export type TicketFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Ticket aggregateRaw
   */
  export type TicketAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Ticket.lotteryClassic
   */
  export type Ticket$lotteryClassicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryClassic
     */
    select?: LotteryClassicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryClassicInclude<ExtArgs> | null
    where?: LotteryClassicWhereInput
  }

  /**
   * Ticket.lotteryLike
   */
  export type Ticket$lotteryLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryLike
     */
    select?: LotteryLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryLikeInclude<ExtArgs> | null
    where?: LotteryLikeWhereInput
  }

  /**
   * Ticket.lotteryFundraising
   */
  export type Ticket$lotteryFundraisingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotteryFundraising
     */
    select?: LotteryFundraisingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotteryFundraisingInclude<ExtArgs> | null
    where?: LotteryFundraisingWhereInput
  }

  /**
   * Ticket without action
   */
  export type TicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type TransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    amount: number | null
    transactionType: $Enums.TransactionType | null
    creditCard: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    transactionType: $Enums.TransactionType | null
    creditCard: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    amount: number
    transactionType: number
    creditCard: number
    createdAt: number
    userId: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    amount?: true
  }

  export type TransactionSumAggregateInputType = {
    amount?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    amount?: true
    transactionType?: true
    creditCard?: true
    createdAt?: true
    userId?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    amount?: true
    transactionType?: true
    creditCard?: true
    createdAt?: true
    userId?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    amount?: true
    transactionType?: true
    creditCard?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    amount: number
    transactionType: $Enums.TransactionType
    creditCard: string | null
    createdAt: Date
    userId: string
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    transactionType?: boolean
    creditCard?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>


  export type TransactionSelectScalar = {
    id?: boolean
    amount?: boolean
    transactionType?: boolean
    creditCard?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      amount: number
      transactionType: $Enums.TransactionType
      creditCard: string | null
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * @param {TransactionFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const transaction = await prisma.transaction.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: TransactionFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Transaction.
     * @param {TransactionAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const transaction = await prisma.transaction.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TransactionAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */ 
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly amount: FieldRef<"Transaction", 'Int'>
    readonly transactionType: FieldRef<"Transaction", 'TransactionType'>
    readonly creditCard: FieldRef<"Transaction", 'String'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly userId: FieldRef<"Transaction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction findRaw
   */
  export type TransactionFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Transaction aggregateRaw
   */
  export type TransactionAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    fullName: 'fullName',
    email: 'email',
    picture: 'picture',
    balance: 'balance',
    accountStatus: 'accountStatus',
    DataOfBirth: 'DataOfBirth'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const LotteryLikeScalarFieldEnum: {
    id: 'id',
    hosted: 'hosted',
    title: 'title',
    description: 'description',
    image: 'image',
    paticipationdescription: 'paticipationdescription',
    startDate: 'startDate',
    endDate: 'endDate',
    lotteryStatus: 'lotteryStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    conditions: 'conditions',
    prizes: 'prizes',
    link: 'link',
    ownerEmail: 'ownerEmail',
    participantCount: 'participantCount',
    winnersTickets: 'winnersTickets'
  };

  export type LotteryLikeScalarFieldEnum = (typeof LotteryLikeScalarFieldEnum)[keyof typeof LotteryLikeScalarFieldEnum]


  export const LotteryFundraisingScalarFieldEnum: {
    id: 'id',
    hosted: 'hosted',
    title: 'title',
    description: 'description',
    image: 'image',
    paticipationdescription: 'paticipationdescription',
    startDate: 'startDate',
    endDate: 'endDate',
    lotteryStatus: 'lotteryStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    price: 'price',
    prizes: 'prizes',
    ownerEmail: 'ownerEmail',
    participantCount: 'participantCount',
    winnersTickets: 'winnersTickets'
  };

  export type LotteryFundraisingScalarFieldEnum = (typeof LotteryFundraisingScalarFieldEnum)[keyof typeof LotteryFundraisingScalarFieldEnum]


  export const LotteryClassicScalarFieldEnum: {
    id: 'id',
    hosted: 'hosted',
    title: 'title',
    description: 'description',
    image: 'image',
    paticipationdescription: 'paticipationdescription',
    startDate: 'startDate',
    endDate: 'endDate',
    lotteryStatus: 'lotteryStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    availableNumberRange: 'availableNumberRange',
    drawnNumbersCount: 'drawnNumbersCount',
    price: 'price',
    prizes: 'prizes',
    ownerEmail: 'ownerEmail',
    participantCount: 'participantCount',
    winnersTickets: 'winnersTickets',
    winningNumbers: 'winningNumbers'
  };

  export type LotteryClassicScalarFieldEnum = (typeof LotteryClassicScalarFieldEnum)[keyof typeof LotteryClassicScalarFieldEnum]


  export const TicketScalarFieldEnum: {
    id: 'id',
    lotteryType: 'lotteryType',
    lotteryId: 'lotteryId',
    ticketNumber: 'ticketNumber',
    purchaseDate: 'purchaseDate',
    status: 'status',
    numbers: 'numbers',
    userEmail: 'userEmail'
  };

  export type TicketScalarFieldEnum = (typeof TicketScalarFieldEnum)[keyof typeof TicketScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    transactionType: 'transactionType',
    creditCard: 'creditCard',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'AccountStatus'
   */
  export type EnumAccountStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountStatus'>
    


  /**
   * Reference to a field of type 'AccountStatus[]'
   */
  export type ListEnumAccountStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountStatus[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'LotteryStatus'
   */
  export type EnumLotteryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LotteryStatus'>
    


  /**
   * Reference to a field of type 'LotteryStatus[]'
   */
  export type ListEnumLotteryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LotteryStatus[]'>
    


  /**
   * Reference to a field of type 'Json[]'
   */
  export type ListJsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'LotteryType'
   */
  export type EnumLotteryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LotteryType'>
    


  /**
   * Reference to a field of type 'LotteryType[]'
   */
  export type ListEnumLotteryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LotteryType[]'>
    


  /**
   * Reference to a field of type 'TicketStatus'
   */
  export type EnumTicketStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TicketStatus'>
    


  /**
   * Reference to a field of type 'TicketStatus[]'
   */
  export type ListEnumTicketStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TicketStatus[]'>
    


  /**
   * Reference to a field of type 'TransactionType'
   */
  export type EnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType'>
    


  /**
   * Reference to a field of type 'TransactionType[]'
   */
  export type ListEnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    fullName?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    picture?: StringNullableFilter<"User"> | string | null
    balance?: IntFilter<"User"> | number
    accountStatus?: EnumAccountStatusFilter<"User"> | $Enums.AccountStatus
    DataOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    tickets?: TicketListRelationFilter
    ownedLotteriesLike?: LotteryLikeListRelationFilter
    ownedLotteriesFundraising?: LotteryFundraisingListRelationFilter
    ownedLotteriesClassic?: LotteryClassicListRelationFilter
    transactionHistory?: TransactionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    picture?: SortOrder
    balance?: SortOrder
    accountStatus?: SortOrder
    DataOfBirth?: SortOrder
    tickets?: TicketOrderByRelationAggregateInput
    ownedLotteriesLike?: LotteryLikeOrderByRelationAggregateInput
    ownedLotteriesFundraising?: LotteryFundraisingOrderByRelationAggregateInput
    ownedLotteriesClassic?: LotteryClassicOrderByRelationAggregateInput
    transactionHistory?: TransactionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    fullName?: StringNullableFilter<"User"> | string | null
    picture?: StringNullableFilter<"User"> | string | null
    balance?: IntFilter<"User"> | number
    accountStatus?: EnumAccountStatusFilter<"User"> | $Enums.AccountStatus
    DataOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    tickets?: TicketListRelationFilter
    ownedLotteriesLike?: LotteryLikeListRelationFilter
    ownedLotteriesFundraising?: LotteryFundraisingListRelationFilter
    ownedLotteriesClassic?: LotteryClassicListRelationFilter
    transactionHistory?: TransactionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    picture?: SortOrder
    balance?: SortOrder
    accountStatus?: SortOrder
    DataOfBirth?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    fullName?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    picture?: StringNullableWithAggregatesFilter<"User"> | string | null
    balance?: IntWithAggregatesFilter<"User"> | number
    accountStatus?: EnumAccountStatusWithAggregatesFilter<"User"> | $Enums.AccountStatus
    DataOfBirth?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type LotteryLikeWhereInput = {
    AND?: LotteryLikeWhereInput | LotteryLikeWhereInput[]
    OR?: LotteryLikeWhereInput[]
    NOT?: LotteryLikeWhereInput | LotteryLikeWhereInput[]
    id?: StringFilter<"LotteryLike"> | string
    hosted?: StringFilter<"LotteryLike"> | string
    title?: StringNullableFilter<"LotteryLike"> | string | null
    description?: StringNullableFilter<"LotteryLike"> | string | null
    image?: StringNullableFilter<"LotteryLike"> | string | null
    paticipationdescription?: StringNullableFilter<"LotteryLike"> | string | null
    startDate?: DateTimeFilter<"LotteryLike"> | Date | string
    endDate?: DateTimeFilter<"LotteryLike"> | Date | string
    lotteryStatus?: EnumLotteryStatusFilter<"LotteryLike"> | $Enums.LotteryStatus
    createdAt?: DateTimeFilter<"LotteryLike"> | Date | string
    updatedAt?: DateTimeFilter<"LotteryLike"> | Date | string
    conditions?: JsonNullableListFilter<"LotteryLike">
    prizes?: JsonNullableListFilter<"LotteryLike">
    link?: StringFilter<"LotteryLike"> | string
    ownerEmail?: StringFilter<"LotteryLike"> | string
    participantCount?: IntNullableFilter<"LotteryLike"> | number | null
    winnersTickets?: JsonNullableFilter<"LotteryLike">
    owner?: XOR<UserRelationFilter, UserWhereInput>
    tickets?: TicketListRelationFilter
  }

  export type LotteryLikeOrderByWithRelationInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    conditions?: SortOrder
    prizes?: SortOrder
    link?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
    winnersTickets?: SortOrder
    owner?: UserOrderByWithRelationInput
    tickets?: TicketOrderByRelationAggregateInput
  }

  export type LotteryLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    link?: string
    AND?: LotteryLikeWhereInput | LotteryLikeWhereInput[]
    OR?: LotteryLikeWhereInput[]
    NOT?: LotteryLikeWhereInput | LotteryLikeWhereInput[]
    hosted?: StringFilter<"LotteryLike"> | string
    title?: StringNullableFilter<"LotteryLike"> | string | null
    description?: StringNullableFilter<"LotteryLike"> | string | null
    image?: StringNullableFilter<"LotteryLike"> | string | null
    paticipationdescription?: StringNullableFilter<"LotteryLike"> | string | null
    startDate?: DateTimeFilter<"LotteryLike"> | Date | string
    endDate?: DateTimeFilter<"LotteryLike"> | Date | string
    lotteryStatus?: EnumLotteryStatusFilter<"LotteryLike"> | $Enums.LotteryStatus
    createdAt?: DateTimeFilter<"LotteryLike"> | Date | string
    updatedAt?: DateTimeFilter<"LotteryLike"> | Date | string
    conditions?: JsonNullableListFilter<"LotteryLike">
    prizes?: JsonNullableListFilter<"LotteryLike">
    ownerEmail?: StringFilter<"LotteryLike"> | string
    participantCount?: IntNullableFilter<"LotteryLike"> | number | null
    winnersTickets?: JsonNullableFilter<"LotteryLike">
    owner?: XOR<UserRelationFilter, UserWhereInput>
    tickets?: TicketListRelationFilter
  }, "id" | "link">

  export type LotteryLikeOrderByWithAggregationInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    conditions?: SortOrder
    prizes?: SortOrder
    link?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
    winnersTickets?: SortOrder
    _count?: LotteryLikeCountOrderByAggregateInput
    _avg?: LotteryLikeAvgOrderByAggregateInput
    _max?: LotteryLikeMaxOrderByAggregateInput
    _min?: LotteryLikeMinOrderByAggregateInput
    _sum?: LotteryLikeSumOrderByAggregateInput
  }

  export type LotteryLikeScalarWhereWithAggregatesInput = {
    AND?: LotteryLikeScalarWhereWithAggregatesInput | LotteryLikeScalarWhereWithAggregatesInput[]
    OR?: LotteryLikeScalarWhereWithAggregatesInput[]
    NOT?: LotteryLikeScalarWhereWithAggregatesInput | LotteryLikeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LotteryLike"> | string
    hosted?: StringWithAggregatesFilter<"LotteryLike"> | string
    title?: StringNullableWithAggregatesFilter<"LotteryLike"> | string | null
    description?: StringNullableWithAggregatesFilter<"LotteryLike"> | string | null
    image?: StringNullableWithAggregatesFilter<"LotteryLike"> | string | null
    paticipationdescription?: StringNullableWithAggregatesFilter<"LotteryLike"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"LotteryLike"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"LotteryLike"> | Date | string
    lotteryStatus?: EnumLotteryStatusWithAggregatesFilter<"LotteryLike"> | $Enums.LotteryStatus
    createdAt?: DateTimeWithAggregatesFilter<"LotteryLike"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LotteryLike"> | Date | string
    conditions?: JsonNullableListFilter<"LotteryLike">
    prizes?: JsonNullableListFilter<"LotteryLike">
    link?: StringWithAggregatesFilter<"LotteryLike"> | string
    ownerEmail?: StringWithAggregatesFilter<"LotteryLike"> | string
    participantCount?: IntNullableWithAggregatesFilter<"LotteryLike"> | number | null
    winnersTickets?: JsonNullableWithAggregatesFilter<"LotteryLike">
  }

  export type LotteryFundraisingWhereInput = {
    AND?: LotteryFundraisingWhereInput | LotteryFundraisingWhereInput[]
    OR?: LotteryFundraisingWhereInput[]
    NOT?: LotteryFundraisingWhereInput | LotteryFundraisingWhereInput[]
    id?: StringFilter<"LotteryFundraising"> | string
    hosted?: StringFilter<"LotteryFundraising"> | string
    title?: StringNullableFilter<"LotteryFundraising"> | string | null
    description?: StringNullableFilter<"LotteryFundraising"> | string | null
    image?: StringNullableFilter<"LotteryFundraising"> | string | null
    paticipationdescription?: StringNullableFilter<"LotteryFundraising"> | string | null
    startDate?: DateTimeFilter<"LotteryFundraising"> | Date | string
    endDate?: DateTimeFilter<"LotteryFundraising"> | Date | string
    lotteryStatus?: EnumLotteryStatusFilter<"LotteryFundraising"> | $Enums.LotteryStatus
    createdAt?: DateTimeFilter<"LotteryFundraising"> | Date | string
    updatedAt?: DateTimeFilter<"LotteryFundraising"> | Date | string
    price?: IntFilter<"LotteryFundraising"> | number
    prizes?: JsonNullableListFilter<"LotteryFundraising">
    ownerEmail?: StringFilter<"LotteryFundraising"> | string
    participantCount?: IntNullableFilter<"LotteryFundraising"> | number | null
    winnersTickets?: JsonNullableFilter<"LotteryFundraising">
    owner?: XOR<UserRelationFilter, UserWhereInput>
    tickets?: TicketListRelationFilter
  }

  export type LotteryFundraisingOrderByWithRelationInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    price?: SortOrder
    prizes?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
    winnersTickets?: SortOrder
    owner?: UserOrderByWithRelationInput
    tickets?: TicketOrderByRelationAggregateInput
  }

  export type LotteryFundraisingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LotteryFundraisingWhereInput | LotteryFundraisingWhereInput[]
    OR?: LotteryFundraisingWhereInput[]
    NOT?: LotteryFundraisingWhereInput | LotteryFundraisingWhereInput[]
    hosted?: StringFilter<"LotteryFundraising"> | string
    title?: StringNullableFilter<"LotteryFundraising"> | string | null
    description?: StringNullableFilter<"LotteryFundraising"> | string | null
    image?: StringNullableFilter<"LotteryFundraising"> | string | null
    paticipationdescription?: StringNullableFilter<"LotteryFundraising"> | string | null
    startDate?: DateTimeFilter<"LotteryFundraising"> | Date | string
    endDate?: DateTimeFilter<"LotteryFundraising"> | Date | string
    lotteryStatus?: EnumLotteryStatusFilter<"LotteryFundraising"> | $Enums.LotteryStatus
    createdAt?: DateTimeFilter<"LotteryFundraising"> | Date | string
    updatedAt?: DateTimeFilter<"LotteryFundraising"> | Date | string
    price?: IntFilter<"LotteryFundraising"> | number
    prizes?: JsonNullableListFilter<"LotteryFundraising">
    ownerEmail?: StringFilter<"LotteryFundraising"> | string
    participantCount?: IntNullableFilter<"LotteryFundraising"> | number | null
    winnersTickets?: JsonNullableFilter<"LotteryFundraising">
    owner?: XOR<UserRelationFilter, UserWhereInput>
    tickets?: TicketListRelationFilter
  }, "id">

  export type LotteryFundraisingOrderByWithAggregationInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    price?: SortOrder
    prizes?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
    winnersTickets?: SortOrder
    _count?: LotteryFundraisingCountOrderByAggregateInput
    _avg?: LotteryFundraisingAvgOrderByAggregateInput
    _max?: LotteryFundraisingMaxOrderByAggregateInput
    _min?: LotteryFundraisingMinOrderByAggregateInput
    _sum?: LotteryFundraisingSumOrderByAggregateInput
  }

  export type LotteryFundraisingScalarWhereWithAggregatesInput = {
    AND?: LotteryFundraisingScalarWhereWithAggregatesInput | LotteryFundraisingScalarWhereWithAggregatesInput[]
    OR?: LotteryFundraisingScalarWhereWithAggregatesInput[]
    NOT?: LotteryFundraisingScalarWhereWithAggregatesInput | LotteryFundraisingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LotteryFundraising"> | string
    hosted?: StringWithAggregatesFilter<"LotteryFundraising"> | string
    title?: StringNullableWithAggregatesFilter<"LotteryFundraising"> | string | null
    description?: StringNullableWithAggregatesFilter<"LotteryFundraising"> | string | null
    image?: StringNullableWithAggregatesFilter<"LotteryFundraising"> | string | null
    paticipationdescription?: StringNullableWithAggregatesFilter<"LotteryFundraising"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"LotteryFundraising"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"LotteryFundraising"> | Date | string
    lotteryStatus?: EnumLotteryStatusWithAggregatesFilter<"LotteryFundraising"> | $Enums.LotteryStatus
    createdAt?: DateTimeWithAggregatesFilter<"LotteryFundraising"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LotteryFundraising"> | Date | string
    price?: IntWithAggregatesFilter<"LotteryFundraising"> | number
    prizes?: JsonNullableListFilter<"LotteryFundraising">
    ownerEmail?: StringWithAggregatesFilter<"LotteryFundraising"> | string
    participantCount?: IntNullableWithAggregatesFilter<"LotteryFundraising"> | number | null
    winnersTickets?: JsonNullableWithAggregatesFilter<"LotteryFundraising">
  }

  export type LotteryClassicWhereInput = {
    AND?: LotteryClassicWhereInput | LotteryClassicWhereInput[]
    OR?: LotteryClassicWhereInput[]
    NOT?: LotteryClassicWhereInput | LotteryClassicWhereInput[]
    id?: StringFilter<"LotteryClassic"> | string
    hosted?: StringFilter<"LotteryClassic"> | string
    title?: StringNullableFilter<"LotteryClassic"> | string | null
    description?: StringNullableFilter<"LotteryClassic"> | string | null
    image?: StringNullableFilter<"LotteryClassic"> | string | null
    paticipationdescription?: StringNullableFilter<"LotteryClassic"> | string | null
    startDate?: DateTimeFilter<"LotteryClassic"> | Date | string
    endDate?: DateTimeFilter<"LotteryClassic"> | Date | string
    lotteryStatus?: EnumLotteryStatusFilter<"LotteryClassic"> | $Enums.LotteryStatus
    createdAt?: DateTimeFilter<"LotteryClassic"> | Date | string
    updatedAt?: DateTimeFilter<"LotteryClassic"> | Date | string
    availableNumberRange?: IntFilter<"LotteryClassic"> | number
    drawnNumbersCount?: IntFilter<"LotteryClassic"> | number
    price?: IntFilter<"LotteryClassic"> | number
    prizes?: JsonNullableListFilter<"LotteryClassic">
    ownerEmail?: StringFilter<"LotteryClassic"> | string
    participantCount?: IntNullableFilter<"LotteryClassic"> | number | null
    winnersTickets?: JsonNullableFilter<"LotteryClassic">
    winningNumbers?: JsonNullableFilter<"LotteryClassic">
    owner?: XOR<UserRelationFilter, UserWhereInput>
    tickets?: TicketListRelationFilter
  }

  export type LotteryClassicOrderByWithRelationInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    availableNumberRange?: SortOrder
    drawnNumbersCount?: SortOrder
    price?: SortOrder
    prizes?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
    winnersTickets?: SortOrder
    winningNumbers?: SortOrder
    owner?: UserOrderByWithRelationInput
    tickets?: TicketOrderByRelationAggregateInput
  }

  export type LotteryClassicWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LotteryClassicWhereInput | LotteryClassicWhereInput[]
    OR?: LotteryClassicWhereInput[]
    NOT?: LotteryClassicWhereInput | LotteryClassicWhereInput[]
    hosted?: StringFilter<"LotteryClassic"> | string
    title?: StringNullableFilter<"LotteryClassic"> | string | null
    description?: StringNullableFilter<"LotteryClassic"> | string | null
    image?: StringNullableFilter<"LotteryClassic"> | string | null
    paticipationdescription?: StringNullableFilter<"LotteryClassic"> | string | null
    startDate?: DateTimeFilter<"LotteryClassic"> | Date | string
    endDate?: DateTimeFilter<"LotteryClassic"> | Date | string
    lotteryStatus?: EnumLotteryStatusFilter<"LotteryClassic"> | $Enums.LotteryStatus
    createdAt?: DateTimeFilter<"LotteryClassic"> | Date | string
    updatedAt?: DateTimeFilter<"LotteryClassic"> | Date | string
    availableNumberRange?: IntFilter<"LotteryClassic"> | number
    drawnNumbersCount?: IntFilter<"LotteryClassic"> | number
    price?: IntFilter<"LotteryClassic"> | number
    prizes?: JsonNullableListFilter<"LotteryClassic">
    ownerEmail?: StringFilter<"LotteryClassic"> | string
    participantCount?: IntNullableFilter<"LotteryClassic"> | number | null
    winnersTickets?: JsonNullableFilter<"LotteryClassic">
    winningNumbers?: JsonNullableFilter<"LotteryClassic">
    owner?: XOR<UserRelationFilter, UserWhereInput>
    tickets?: TicketListRelationFilter
  }, "id">

  export type LotteryClassicOrderByWithAggregationInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    availableNumberRange?: SortOrder
    drawnNumbersCount?: SortOrder
    price?: SortOrder
    prizes?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
    winnersTickets?: SortOrder
    winningNumbers?: SortOrder
    _count?: LotteryClassicCountOrderByAggregateInput
    _avg?: LotteryClassicAvgOrderByAggregateInput
    _max?: LotteryClassicMaxOrderByAggregateInput
    _min?: LotteryClassicMinOrderByAggregateInput
    _sum?: LotteryClassicSumOrderByAggregateInput
  }

  export type LotteryClassicScalarWhereWithAggregatesInput = {
    AND?: LotteryClassicScalarWhereWithAggregatesInput | LotteryClassicScalarWhereWithAggregatesInput[]
    OR?: LotteryClassicScalarWhereWithAggregatesInput[]
    NOT?: LotteryClassicScalarWhereWithAggregatesInput | LotteryClassicScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LotteryClassic"> | string
    hosted?: StringWithAggregatesFilter<"LotteryClassic"> | string
    title?: StringNullableWithAggregatesFilter<"LotteryClassic"> | string | null
    description?: StringNullableWithAggregatesFilter<"LotteryClassic"> | string | null
    image?: StringNullableWithAggregatesFilter<"LotteryClassic"> | string | null
    paticipationdescription?: StringNullableWithAggregatesFilter<"LotteryClassic"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"LotteryClassic"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"LotteryClassic"> | Date | string
    lotteryStatus?: EnumLotteryStatusWithAggregatesFilter<"LotteryClassic"> | $Enums.LotteryStatus
    createdAt?: DateTimeWithAggregatesFilter<"LotteryClassic"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LotteryClassic"> | Date | string
    availableNumberRange?: IntWithAggregatesFilter<"LotteryClassic"> | number
    drawnNumbersCount?: IntWithAggregatesFilter<"LotteryClassic"> | number
    price?: IntWithAggregatesFilter<"LotteryClassic"> | number
    prizes?: JsonNullableListFilter<"LotteryClassic">
    ownerEmail?: StringWithAggregatesFilter<"LotteryClassic"> | string
    participantCount?: IntNullableWithAggregatesFilter<"LotteryClassic"> | number | null
    winnersTickets?: JsonNullableWithAggregatesFilter<"LotteryClassic">
    winningNumbers?: JsonNullableWithAggregatesFilter<"LotteryClassic">
  }

  export type TicketWhereInput = {
    AND?: TicketWhereInput | TicketWhereInput[]
    OR?: TicketWhereInput[]
    NOT?: TicketWhereInput | TicketWhereInput[]
    id?: StringFilter<"Ticket"> | string
    lotteryType?: EnumLotteryTypeFilter<"Ticket"> | $Enums.LotteryType
    lotteryId?: StringFilter<"Ticket"> | string
    ticketNumber?: StringFilter<"Ticket"> | string
    purchaseDate?: DateTimeFilter<"Ticket"> | Date | string
    status?: EnumTicketStatusFilter<"Ticket"> | $Enums.TicketStatus
    numbers?: JsonNullableFilter<"Ticket">
    userEmail?: StringFilter<"Ticket"> | string
    lotteryClassic?: XOR<LotteryClassicNullableRelationFilter, LotteryClassicWhereInput> | null
    lotteryLike?: XOR<LotteryLikeNullableRelationFilter, LotteryLikeWhereInput> | null
    lotteryFundraising?: XOR<LotteryFundraisingNullableRelationFilter, LotteryFundraisingWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TicketOrderByWithRelationInput = {
    id?: SortOrder
    lotteryType?: SortOrder
    lotteryId?: SortOrder
    ticketNumber?: SortOrder
    purchaseDate?: SortOrder
    status?: SortOrder
    numbers?: SortOrder
    userEmail?: SortOrder
    lotteryClassic?: LotteryClassicOrderByWithRelationInput
    lotteryLike?: LotteryLikeOrderByWithRelationInput
    lotteryFundraising?: LotteryFundraisingOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TicketWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    ticketNumber?: string
    AND?: TicketWhereInput | TicketWhereInput[]
    OR?: TicketWhereInput[]
    NOT?: TicketWhereInput | TicketWhereInput[]
    lotteryType?: EnumLotteryTypeFilter<"Ticket"> | $Enums.LotteryType
    lotteryId?: StringFilter<"Ticket"> | string
    purchaseDate?: DateTimeFilter<"Ticket"> | Date | string
    status?: EnumTicketStatusFilter<"Ticket"> | $Enums.TicketStatus
    numbers?: JsonNullableFilter<"Ticket">
    userEmail?: StringFilter<"Ticket"> | string
    lotteryClassic?: XOR<LotteryClassicNullableRelationFilter, LotteryClassicWhereInput> | null
    lotteryLike?: XOR<LotteryLikeNullableRelationFilter, LotteryLikeWhereInput> | null
    lotteryFundraising?: XOR<LotteryFundraisingNullableRelationFilter, LotteryFundraisingWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "ticketNumber">

  export type TicketOrderByWithAggregationInput = {
    id?: SortOrder
    lotteryType?: SortOrder
    lotteryId?: SortOrder
    ticketNumber?: SortOrder
    purchaseDate?: SortOrder
    status?: SortOrder
    numbers?: SortOrder
    userEmail?: SortOrder
    _count?: TicketCountOrderByAggregateInput
    _max?: TicketMaxOrderByAggregateInput
    _min?: TicketMinOrderByAggregateInput
  }

  export type TicketScalarWhereWithAggregatesInput = {
    AND?: TicketScalarWhereWithAggregatesInput | TicketScalarWhereWithAggregatesInput[]
    OR?: TicketScalarWhereWithAggregatesInput[]
    NOT?: TicketScalarWhereWithAggregatesInput | TicketScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Ticket"> | string
    lotteryType?: EnumLotteryTypeWithAggregatesFilter<"Ticket"> | $Enums.LotteryType
    lotteryId?: StringWithAggregatesFilter<"Ticket"> | string
    ticketNumber?: StringWithAggregatesFilter<"Ticket"> | string
    purchaseDate?: DateTimeWithAggregatesFilter<"Ticket"> | Date | string
    status?: EnumTicketStatusWithAggregatesFilter<"Ticket"> | $Enums.TicketStatus
    numbers?: JsonNullableWithAggregatesFilter<"Ticket">
    userEmail?: StringWithAggregatesFilter<"Ticket"> | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    amount?: IntFilter<"Transaction"> | number
    transactionType?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    creditCard?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    userId?: StringFilter<"Transaction"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    transactionType?: SortOrder
    creditCard?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    id_userId?: TransactionIdUserIdCompoundUniqueInput
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    amount?: IntFilter<"Transaction"> | number
    transactionType?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    creditCard?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    userId?: StringFilter<"Transaction"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "id_userId">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    transactionType?: SortOrder
    creditCard?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    amount?: IntWithAggregatesFilter<"Transaction"> | number
    transactionType?: EnumTransactionTypeWithAggregatesFilter<"Transaction"> | $Enums.TransactionType
    creditCard?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    userId?: StringWithAggregatesFilter<"Transaction"> | string
  }

  export type UserCreateInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    fullName?: string | null
    email: string
    picture?: string | null
    balance?: number
    accountStatus?: $Enums.AccountStatus
    DataOfBirth?: Date | string | null
    tickets?: TicketCreateNestedManyWithoutUserInput
    ownedLotteriesLike?: LotteryLikeCreateNestedManyWithoutOwnerInput
    ownedLotteriesFundraising?: LotteryFundraisingCreateNestedManyWithoutOwnerInput
    ownedLotteriesClassic?: LotteryClassicCreateNestedManyWithoutOwnerInput
    transactionHistory?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    fullName?: string | null
    email: string
    picture?: string | null
    balance?: number
    accountStatus?: $Enums.AccountStatus
    DataOfBirth?: Date | string | null
    tickets?: TicketUncheckedCreateNestedManyWithoutUserInput
    ownedLotteriesLike?: LotteryLikeUncheckedCreateNestedManyWithoutOwnerInput
    ownedLotteriesFundraising?: LotteryFundraisingUncheckedCreateNestedManyWithoutOwnerInput
    ownedLotteriesClassic?: LotteryClassicUncheckedCreateNestedManyWithoutOwnerInput
    transactionHistory?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    accountStatus?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    DataOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketUpdateManyWithoutUserNestedInput
    ownedLotteriesLike?: LotteryLikeUpdateManyWithoutOwnerNestedInput
    ownedLotteriesFundraising?: LotteryFundraisingUpdateManyWithoutOwnerNestedInput
    ownedLotteriesClassic?: LotteryClassicUpdateManyWithoutOwnerNestedInput
    transactionHistory?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    accountStatus?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    DataOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketUncheckedUpdateManyWithoutUserNestedInput
    ownedLotteriesLike?: LotteryLikeUncheckedUpdateManyWithoutOwnerNestedInput
    ownedLotteriesFundraising?: LotteryFundraisingUncheckedUpdateManyWithoutOwnerNestedInput
    ownedLotteriesClassic?: LotteryClassicUncheckedUpdateManyWithoutOwnerNestedInput
    transactionHistory?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    fullName?: string | null
    email: string
    picture?: string | null
    balance?: number
    accountStatus?: $Enums.AccountStatus
    DataOfBirth?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    accountStatus?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    DataOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    accountStatus?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    DataOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LotteryLikeCreateInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    conditions?: LotteryLikeCreateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeCreateprizesInput | InputJsonValue[]
    link: string
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    owner: UserCreateNestedOneWithoutOwnedLotteriesLikeInput
    tickets?: TicketCreateNestedManyWithoutLotteryLikeInput
  }

  export type LotteryLikeUncheckedCreateInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    conditions?: LotteryLikeCreateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeCreateprizesInput | InputJsonValue[]
    link: string
    ownerEmail: string
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    tickets?: TicketUncheckedCreateNestedManyWithoutLotteryLikeInput
  }

  export type LotteryLikeUpdateInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conditions?: LotteryLikeUpdateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeUpdateprizesInput | InputJsonValue[]
    link?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    owner?: UserUpdateOneRequiredWithoutOwnedLotteriesLikeNestedInput
    tickets?: TicketUpdateManyWithoutLotteryLikeNestedInput
  }

  export type LotteryLikeUncheckedUpdateInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conditions?: LotteryLikeUpdateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeUpdateprizesInput | InputJsonValue[]
    link?: StringFieldUpdateOperationsInput | string
    ownerEmail?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    tickets?: TicketUncheckedUpdateManyWithoutLotteryLikeNestedInput
  }

  export type LotteryLikeCreateManyInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    conditions?: LotteryLikeCreateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeCreateprizesInput | InputJsonValue[]
    link: string
    ownerEmail: string
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
  }

  export type LotteryLikeUpdateManyMutationInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conditions?: LotteryLikeUpdateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeUpdateprizesInput | InputJsonValue[]
    link?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
  }

  export type LotteryLikeUncheckedUpdateManyInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conditions?: LotteryLikeUpdateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeUpdateprizesInput | InputJsonValue[]
    link?: StringFieldUpdateOperationsInput | string
    ownerEmail?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
  }

  export type LotteryFundraisingCreateInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    price: number
    prizes?: LotteryFundraisingCreateprizesInput | InputJsonValue[]
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    owner: UserCreateNestedOneWithoutOwnedLotteriesFundraisingInput
    tickets?: TicketCreateNestedManyWithoutLotteryFundraisingInput
  }

  export type LotteryFundraisingUncheckedCreateInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    price: number
    prizes?: LotteryFundraisingCreateprizesInput | InputJsonValue[]
    ownerEmail: string
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    tickets?: TicketUncheckedCreateNestedManyWithoutLotteryFundraisingInput
  }

  export type LotteryFundraisingUpdateInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryFundraisingUpdateprizesInput | InputJsonValue[]
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    owner?: UserUpdateOneRequiredWithoutOwnedLotteriesFundraisingNestedInput
    tickets?: TicketUpdateManyWithoutLotteryFundraisingNestedInput
  }

  export type LotteryFundraisingUncheckedUpdateInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryFundraisingUpdateprizesInput | InputJsonValue[]
    ownerEmail?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    tickets?: TicketUncheckedUpdateManyWithoutLotteryFundraisingNestedInput
  }

  export type LotteryFundraisingCreateManyInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    price: number
    prizes?: LotteryFundraisingCreateprizesInput | InputJsonValue[]
    ownerEmail: string
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
  }

  export type LotteryFundraisingUpdateManyMutationInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryFundraisingUpdateprizesInput | InputJsonValue[]
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
  }

  export type LotteryFundraisingUncheckedUpdateManyInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryFundraisingUpdateprizesInput | InputJsonValue[]
    ownerEmail?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
  }

  export type LotteryClassicCreateInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    availableNumberRange: number
    drawnNumbersCount: number
    price: number
    prizes?: LotteryClassicCreateprizesInput | InputJsonValue[]
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    winningNumbers?: InputJsonValue | null
    owner: UserCreateNestedOneWithoutOwnedLotteriesClassicInput
    tickets?: TicketCreateNestedManyWithoutLotteryClassicInput
  }

  export type LotteryClassicUncheckedCreateInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    availableNumberRange: number
    drawnNumbersCount: number
    price: number
    prizes?: LotteryClassicCreateprizesInput | InputJsonValue[]
    ownerEmail: string
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    winningNumbers?: InputJsonValue | null
    tickets?: TicketUncheckedCreateNestedManyWithoutLotteryClassicInput
  }

  export type LotteryClassicUpdateInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availableNumberRange?: IntFieldUpdateOperationsInput | number
    drawnNumbersCount?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryClassicUpdateprizesInput | InputJsonValue[]
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    winningNumbers?: InputJsonValue | InputJsonValue | null
    owner?: UserUpdateOneRequiredWithoutOwnedLotteriesClassicNestedInput
    tickets?: TicketUpdateManyWithoutLotteryClassicNestedInput
  }

  export type LotteryClassicUncheckedUpdateInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availableNumberRange?: IntFieldUpdateOperationsInput | number
    drawnNumbersCount?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryClassicUpdateprizesInput | InputJsonValue[]
    ownerEmail?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    winningNumbers?: InputJsonValue | InputJsonValue | null
    tickets?: TicketUncheckedUpdateManyWithoutLotteryClassicNestedInput
  }

  export type LotteryClassicCreateManyInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    availableNumberRange: number
    drawnNumbersCount: number
    price: number
    prizes?: LotteryClassicCreateprizesInput | InputJsonValue[]
    ownerEmail: string
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    winningNumbers?: InputJsonValue | null
  }

  export type LotteryClassicUpdateManyMutationInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availableNumberRange?: IntFieldUpdateOperationsInput | number
    drawnNumbersCount?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryClassicUpdateprizesInput | InputJsonValue[]
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    winningNumbers?: InputJsonValue | InputJsonValue | null
  }

  export type LotteryClassicUncheckedUpdateManyInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availableNumberRange?: IntFieldUpdateOperationsInput | number
    drawnNumbersCount?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryClassicUpdateprizesInput | InputJsonValue[]
    ownerEmail?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    winningNumbers?: InputJsonValue | InputJsonValue | null
  }

  export type TicketCreateInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
    lotteryClassic?: LotteryClassicCreateNestedOneWithoutTicketsInput
    lotteryLike?: LotteryLikeCreateNestedOneWithoutTicketsInput
    lotteryFundraising?: LotteryFundraisingCreateNestedOneWithoutTicketsInput
    user: UserCreateNestedOneWithoutTicketsInput
  }

  export type TicketUncheckedCreateInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    lotteryId: string
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
    userEmail: string
  }

  export type TicketUpdateInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
    lotteryClassic?: LotteryClassicUpdateOneWithoutTicketsNestedInput
    lotteryLike?: LotteryLikeUpdateOneWithoutTicketsNestedInput
    lotteryFundraising?: LotteryFundraisingUpdateOneWithoutTicketsNestedInput
    user?: UserUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type TicketUncheckedUpdateInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    lotteryId?: StringFieldUpdateOperationsInput | string
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
    userEmail?: StringFieldUpdateOperationsInput | string
  }

  export type TicketCreateManyInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    lotteryId: string
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
    userEmail: string
  }

  export type TicketUpdateManyMutationInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
  }

  export type TicketUncheckedUpdateManyInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    lotteryId?: StringFieldUpdateOperationsInput | string
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
    userEmail?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionCreateInput = {
    id?: string
    amount: number
    transactionType: $Enums.TransactionType
    creditCard?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTransactionHistoryInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    amount: number
    transactionType: $Enums.TransactionType
    creditCard?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type TransactionUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    creditCard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTransactionHistoryNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    creditCard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionCreateManyInput = {
    id?: string
    amount: number
    transactionType: $Enums.TransactionType
    creditCard?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type TransactionUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    creditCard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    amount?: IntFieldUpdateOperationsInput | number
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    creditCard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumAccountStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountStatusFilter<$PrismaModel> | $Enums.AccountStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type TicketListRelationFilter = {
    every?: TicketWhereInput
    some?: TicketWhereInput
    none?: TicketWhereInput
  }

  export type LotteryLikeListRelationFilter = {
    every?: LotteryLikeWhereInput
    some?: LotteryLikeWhereInput
    none?: LotteryLikeWhereInput
  }

  export type LotteryFundraisingListRelationFilter = {
    every?: LotteryFundraisingWhereInput
    some?: LotteryFundraisingWhereInput
    none?: LotteryFundraisingWhereInput
  }

  export type LotteryClassicListRelationFilter = {
    every?: LotteryClassicWhereInput
    some?: LotteryClassicWhereInput
    none?: LotteryClassicWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type TicketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LotteryLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LotteryFundraisingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LotteryClassicOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    picture?: SortOrder
    balance?: SortOrder
    accountStatus?: SortOrder
    DataOfBirth?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    balance?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    picture?: SortOrder
    balance?: SortOrder
    accountStatus?: SortOrder
    DataOfBirth?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    picture?: SortOrder
    balance?: SortOrder
    accountStatus?: SortOrder
    DataOfBirth?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    balance?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumAccountStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountStatusWithAggregatesFilter<$PrismaModel> | $Enums.AccountStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountStatusFilter<$PrismaModel>
    _max?: NestedEnumAccountStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumLotteryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LotteryStatus | EnumLotteryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LotteryStatus[] | ListEnumLotteryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LotteryStatus[] | ListEnumLotteryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLotteryStatusFilter<$PrismaModel> | $Enums.LotteryStatus
  }
  export type JsonNullableListFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableListFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableListFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel> | null
    has?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    hasEvery?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    hasSome?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type LotteryLikeCountOrderByAggregateInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    conditions?: SortOrder
    prizes?: SortOrder
    link?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
    winnersTickets?: SortOrder
  }

  export type LotteryLikeAvgOrderByAggregateInput = {
    participantCount?: SortOrder
  }

  export type LotteryLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    link?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
  }

  export type LotteryLikeMinOrderByAggregateInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    link?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
  }

  export type LotteryLikeSumOrderByAggregateInput = {
    participantCount?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumLotteryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LotteryStatus | EnumLotteryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LotteryStatus[] | ListEnumLotteryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LotteryStatus[] | ListEnumLotteryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLotteryStatusWithAggregatesFilter<$PrismaModel> | $Enums.LotteryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLotteryStatusFilter<$PrismaModel>
    _max?: NestedEnumLotteryStatusFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type LotteryFundraisingCountOrderByAggregateInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    price?: SortOrder
    prizes?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
    winnersTickets?: SortOrder
  }

  export type LotteryFundraisingAvgOrderByAggregateInput = {
    price?: SortOrder
    participantCount?: SortOrder
  }

  export type LotteryFundraisingMaxOrderByAggregateInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    price?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
  }

  export type LotteryFundraisingMinOrderByAggregateInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    price?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
  }

  export type LotteryFundraisingSumOrderByAggregateInput = {
    price?: SortOrder
    participantCount?: SortOrder
  }

  export type LotteryClassicCountOrderByAggregateInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    availableNumberRange?: SortOrder
    drawnNumbersCount?: SortOrder
    price?: SortOrder
    prizes?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
    winnersTickets?: SortOrder
    winningNumbers?: SortOrder
  }

  export type LotteryClassicAvgOrderByAggregateInput = {
    availableNumberRange?: SortOrder
    drawnNumbersCount?: SortOrder
    price?: SortOrder
    participantCount?: SortOrder
  }

  export type LotteryClassicMaxOrderByAggregateInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    availableNumberRange?: SortOrder
    drawnNumbersCount?: SortOrder
    price?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
  }

  export type LotteryClassicMinOrderByAggregateInput = {
    id?: SortOrder
    hosted?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    paticipationdescription?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lotteryStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    availableNumberRange?: SortOrder
    drawnNumbersCount?: SortOrder
    price?: SortOrder
    ownerEmail?: SortOrder
    participantCount?: SortOrder
  }

  export type LotteryClassicSumOrderByAggregateInput = {
    availableNumberRange?: SortOrder
    drawnNumbersCount?: SortOrder
    price?: SortOrder
    participantCount?: SortOrder
  }

  export type EnumLotteryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LotteryType | EnumLotteryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LotteryType[] | ListEnumLotteryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LotteryType[] | ListEnumLotteryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLotteryTypeFilter<$PrismaModel> | $Enums.LotteryType
  }

  export type EnumTicketStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketStatus | EnumTicketStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTicketStatusFilter<$PrismaModel> | $Enums.TicketStatus
  }

  export type LotteryClassicNullableRelationFilter = {
    is?: LotteryClassicWhereInput | null
    isNot?: LotteryClassicWhereInput | null
  }

  export type LotteryLikeNullableRelationFilter = {
    is?: LotteryLikeWhereInput | null
    isNot?: LotteryLikeWhereInput | null
  }

  export type LotteryFundraisingNullableRelationFilter = {
    is?: LotteryFundraisingWhereInput | null
    isNot?: LotteryFundraisingWhereInput | null
  }

  export type TicketCountOrderByAggregateInput = {
    id?: SortOrder
    lotteryType?: SortOrder
    lotteryId?: SortOrder
    ticketNumber?: SortOrder
    purchaseDate?: SortOrder
    status?: SortOrder
    numbers?: SortOrder
    userEmail?: SortOrder
  }

  export type TicketMaxOrderByAggregateInput = {
    id?: SortOrder
    lotteryType?: SortOrder
    lotteryId?: SortOrder
    ticketNumber?: SortOrder
    purchaseDate?: SortOrder
    status?: SortOrder
    userEmail?: SortOrder
  }

  export type TicketMinOrderByAggregateInput = {
    id?: SortOrder
    lotteryType?: SortOrder
    lotteryId?: SortOrder
    ticketNumber?: SortOrder
    purchaseDate?: SortOrder
    status?: SortOrder
    userEmail?: SortOrder
  }

  export type EnumLotteryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LotteryType | EnumLotteryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LotteryType[] | ListEnumLotteryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LotteryType[] | ListEnumLotteryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLotteryTypeWithAggregatesFilter<$PrismaModel> | $Enums.LotteryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLotteryTypeFilter<$PrismaModel>
    _max?: NestedEnumLotteryTypeFilter<$PrismaModel>
  }

  export type EnumTicketStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketStatus | EnumTicketStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTicketStatusWithAggregatesFilter<$PrismaModel> | $Enums.TicketStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTicketStatusFilter<$PrismaModel>
    _max?: NestedEnumTicketStatusFilter<$PrismaModel>
  }

  export type EnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type TransactionIdUserIdCompoundUniqueInput = {
    id: string
    userId: string
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    transactionType?: SortOrder
    creditCard?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    transactionType?: SortOrder
    creditCard?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    transactionType?: SortOrder
    creditCard?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type TicketCreateNestedManyWithoutUserInput = {
    create?: XOR<TicketCreateWithoutUserInput, TicketUncheckedCreateWithoutUserInput> | TicketCreateWithoutUserInput[] | TicketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutUserInput | TicketCreateOrConnectWithoutUserInput[]
    createMany?: TicketCreateManyUserInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type LotteryLikeCreateNestedManyWithoutOwnerInput = {
    create?: XOR<LotteryLikeCreateWithoutOwnerInput, LotteryLikeUncheckedCreateWithoutOwnerInput> | LotteryLikeCreateWithoutOwnerInput[] | LotteryLikeUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LotteryLikeCreateOrConnectWithoutOwnerInput | LotteryLikeCreateOrConnectWithoutOwnerInput[]
    createMany?: LotteryLikeCreateManyOwnerInputEnvelope
    connect?: LotteryLikeWhereUniqueInput | LotteryLikeWhereUniqueInput[]
  }

  export type LotteryFundraisingCreateNestedManyWithoutOwnerInput = {
    create?: XOR<LotteryFundraisingCreateWithoutOwnerInput, LotteryFundraisingUncheckedCreateWithoutOwnerInput> | LotteryFundraisingCreateWithoutOwnerInput[] | LotteryFundraisingUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LotteryFundraisingCreateOrConnectWithoutOwnerInput | LotteryFundraisingCreateOrConnectWithoutOwnerInput[]
    createMany?: LotteryFundraisingCreateManyOwnerInputEnvelope
    connect?: LotteryFundraisingWhereUniqueInput | LotteryFundraisingWhereUniqueInput[]
  }

  export type LotteryClassicCreateNestedManyWithoutOwnerInput = {
    create?: XOR<LotteryClassicCreateWithoutOwnerInput, LotteryClassicUncheckedCreateWithoutOwnerInput> | LotteryClassicCreateWithoutOwnerInput[] | LotteryClassicUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LotteryClassicCreateOrConnectWithoutOwnerInput | LotteryClassicCreateOrConnectWithoutOwnerInput[]
    createMany?: LotteryClassicCreateManyOwnerInputEnvelope
    connect?: LotteryClassicWhereUniqueInput | LotteryClassicWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TicketCreateWithoutUserInput, TicketUncheckedCreateWithoutUserInput> | TicketCreateWithoutUserInput[] | TicketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutUserInput | TicketCreateOrConnectWithoutUserInput[]
    createMany?: TicketCreateManyUserInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type LotteryLikeUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<LotteryLikeCreateWithoutOwnerInput, LotteryLikeUncheckedCreateWithoutOwnerInput> | LotteryLikeCreateWithoutOwnerInput[] | LotteryLikeUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LotteryLikeCreateOrConnectWithoutOwnerInput | LotteryLikeCreateOrConnectWithoutOwnerInput[]
    createMany?: LotteryLikeCreateManyOwnerInputEnvelope
    connect?: LotteryLikeWhereUniqueInput | LotteryLikeWhereUniqueInput[]
  }

  export type LotteryFundraisingUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<LotteryFundraisingCreateWithoutOwnerInput, LotteryFundraisingUncheckedCreateWithoutOwnerInput> | LotteryFundraisingCreateWithoutOwnerInput[] | LotteryFundraisingUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LotteryFundraisingCreateOrConnectWithoutOwnerInput | LotteryFundraisingCreateOrConnectWithoutOwnerInput[]
    createMany?: LotteryFundraisingCreateManyOwnerInputEnvelope
    connect?: LotteryFundraisingWhereUniqueInput | LotteryFundraisingWhereUniqueInput[]
  }

  export type LotteryClassicUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<LotteryClassicCreateWithoutOwnerInput, LotteryClassicUncheckedCreateWithoutOwnerInput> | LotteryClassicCreateWithoutOwnerInput[] | LotteryClassicUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LotteryClassicCreateOrConnectWithoutOwnerInput | LotteryClassicCreateOrConnectWithoutOwnerInput[]
    createMany?: LotteryClassicCreateManyOwnerInputEnvelope
    connect?: LotteryClassicWhereUniqueInput | LotteryClassicWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumAccountStatusFieldUpdateOperationsInput = {
    set?: $Enums.AccountStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type TicketUpdateManyWithoutUserNestedInput = {
    create?: XOR<TicketCreateWithoutUserInput, TicketUncheckedCreateWithoutUserInput> | TicketCreateWithoutUserInput[] | TicketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutUserInput | TicketCreateOrConnectWithoutUserInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutUserInput | TicketUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TicketCreateManyUserInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutUserInput | TicketUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutUserInput | TicketUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type LotteryLikeUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<LotteryLikeCreateWithoutOwnerInput, LotteryLikeUncheckedCreateWithoutOwnerInput> | LotteryLikeCreateWithoutOwnerInput[] | LotteryLikeUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LotteryLikeCreateOrConnectWithoutOwnerInput | LotteryLikeCreateOrConnectWithoutOwnerInput[]
    upsert?: LotteryLikeUpsertWithWhereUniqueWithoutOwnerInput | LotteryLikeUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: LotteryLikeCreateManyOwnerInputEnvelope
    set?: LotteryLikeWhereUniqueInput | LotteryLikeWhereUniqueInput[]
    disconnect?: LotteryLikeWhereUniqueInput | LotteryLikeWhereUniqueInput[]
    delete?: LotteryLikeWhereUniqueInput | LotteryLikeWhereUniqueInput[]
    connect?: LotteryLikeWhereUniqueInput | LotteryLikeWhereUniqueInput[]
    update?: LotteryLikeUpdateWithWhereUniqueWithoutOwnerInput | LotteryLikeUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: LotteryLikeUpdateManyWithWhereWithoutOwnerInput | LotteryLikeUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: LotteryLikeScalarWhereInput | LotteryLikeScalarWhereInput[]
  }

  export type LotteryFundraisingUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<LotteryFundraisingCreateWithoutOwnerInput, LotteryFundraisingUncheckedCreateWithoutOwnerInput> | LotteryFundraisingCreateWithoutOwnerInput[] | LotteryFundraisingUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LotteryFundraisingCreateOrConnectWithoutOwnerInput | LotteryFundraisingCreateOrConnectWithoutOwnerInput[]
    upsert?: LotteryFundraisingUpsertWithWhereUniqueWithoutOwnerInput | LotteryFundraisingUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: LotteryFundraisingCreateManyOwnerInputEnvelope
    set?: LotteryFundraisingWhereUniqueInput | LotteryFundraisingWhereUniqueInput[]
    disconnect?: LotteryFundraisingWhereUniqueInput | LotteryFundraisingWhereUniqueInput[]
    delete?: LotteryFundraisingWhereUniqueInput | LotteryFundraisingWhereUniqueInput[]
    connect?: LotteryFundraisingWhereUniqueInput | LotteryFundraisingWhereUniqueInput[]
    update?: LotteryFundraisingUpdateWithWhereUniqueWithoutOwnerInput | LotteryFundraisingUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: LotteryFundraisingUpdateManyWithWhereWithoutOwnerInput | LotteryFundraisingUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: LotteryFundraisingScalarWhereInput | LotteryFundraisingScalarWhereInput[]
  }

  export type LotteryClassicUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<LotteryClassicCreateWithoutOwnerInput, LotteryClassicUncheckedCreateWithoutOwnerInput> | LotteryClassicCreateWithoutOwnerInput[] | LotteryClassicUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LotteryClassicCreateOrConnectWithoutOwnerInput | LotteryClassicCreateOrConnectWithoutOwnerInput[]
    upsert?: LotteryClassicUpsertWithWhereUniqueWithoutOwnerInput | LotteryClassicUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: LotteryClassicCreateManyOwnerInputEnvelope
    set?: LotteryClassicWhereUniqueInput | LotteryClassicWhereUniqueInput[]
    disconnect?: LotteryClassicWhereUniqueInput | LotteryClassicWhereUniqueInput[]
    delete?: LotteryClassicWhereUniqueInput | LotteryClassicWhereUniqueInput[]
    connect?: LotteryClassicWhereUniqueInput | LotteryClassicWhereUniqueInput[]
    update?: LotteryClassicUpdateWithWhereUniqueWithoutOwnerInput | LotteryClassicUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: LotteryClassicUpdateManyWithWhereWithoutOwnerInput | LotteryClassicUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: LotteryClassicScalarWhereInput | LotteryClassicScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TicketCreateWithoutUserInput, TicketUncheckedCreateWithoutUserInput> | TicketCreateWithoutUserInput[] | TicketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutUserInput | TicketCreateOrConnectWithoutUserInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutUserInput | TicketUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TicketCreateManyUserInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutUserInput | TicketUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutUserInput | TicketUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type LotteryLikeUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<LotteryLikeCreateWithoutOwnerInput, LotteryLikeUncheckedCreateWithoutOwnerInput> | LotteryLikeCreateWithoutOwnerInput[] | LotteryLikeUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LotteryLikeCreateOrConnectWithoutOwnerInput | LotteryLikeCreateOrConnectWithoutOwnerInput[]
    upsert?: LotteryLikeUpsertWithWhereUniqueWithoutOwnerInput | LotteryLikeUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: LotteryLikeCreateManyOwnerInputEnvelope
    set?: LotteryLikeWhereUniqueInput | LotteryLikeWhereUniqueInput[]
    disconnect?: LotteryLikeWhereUniqueInput | LotteryLikeWhereUniqueInput[]
    delete?: LotteryLikeWhereUniqueInput | LotteryLikeWhereUniqueInput[]
    connect?: LotteryLikeWhereUniqueInput | LotteryLikeWhereUniqueInput[]
    update?: LotteryLikeUpdateWithWhereUniqueWithoutOwnerInput | LotteryLikeUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: LotteryLikeUpdateManyWithWhereWithoutOwnerInput | LotteryLikeUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: LotteryLikeScalarWhereInput | LotteryLikeScalarWhereInput[]
  }

  export type LotteryFundraisingUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<LotteryFundraisingCreateWithoutOwnerInput, LotteryFundraisingUncheckedCreateWithoutOwnerInput> | LotteryFundraisingCreateWithoutOwnerInput[] | LotteryFundraisingUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LotteryFundraisingCreateOrConnectWithoutOwnerInput | LotteryFundraisingCreateOrConnectWithoutOwnerInput[]
    upsert?: LotteryFundraisingUpsertWithWhereUniqueWithoutOwnerInput | LotteryFundraisingUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: LotteryFundraisingCreateManyOwnerInputEnvelope
    set?: LotteryFundraisingWhereUniqueInput | LotteryFundraisingWhereUniqueInput[]
    disconnect?: LotteryFundraisingWhereUniqueInput | LotteryFundraisingWhereUniqueInput[]
    delete?: LotteryFundraisingWhereUniqueInput | LotteryFundraisingWhereUniqueInput[]
    connect?: LotteryFundraisingWhereUniqueInput | LotteryFundraisingWhereUniqueInput[]
    update?: LotteryFundraisingUpdateWithWhereUniqueWithoutOwnerInput | LotteryFundraisingUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: LotteryFundraisingUpdateManyWithWhereWithoutOwnerInput | LotteryFundraisingUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: LotteryFundraisingScalarWhereInput | LotteryFundraisingScalarWhereInput[]
  }

  export type LotteryClassicUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<LotteryClassicCreateWithoutOwnerInput, LotteryClassicUncheckedCreateWithoutOwnerInput> | LotteryClassicCreateWithoutOwnerInput[] | LotteryClassicUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LotteryClassicCreateOrConnectWithoutOwnerInput | LotteryClassicCreateOrConnectWithoutOwnerInput[]
    upsert?: LotteryClassicUpsertWithWhereUniqueWithoutOwnerInput | LotteryClassicUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: LotteryClassicCreateManyOwnerInputEnvelope
    set?: LotteryClassicWhereUniqueInput | LotteryClassicWhereUniqueInput[]
    disconnect?: LotteryClassicWhereUniqueInput | LotteryClassicWhereUniqueInput[]
    delete?: LotteryClassicWhereUniqueInput | LotteryClassicWhereUniqueInput[]
    connect?: LotteryClassicWhereUniqueInput | LotteryClassicWhereUniqueInput[]
    update?: LotteryClassicUpdateWithWhereUniqueWithoutOwnerInput | LotteryClassicUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: LotteryClassicUpdateManyWithWhereWithoutOwnerInput | LotteryClassicUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: LotteryClassicScalarWhereInput | LotteryClassicScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type LotteryLikeCreateconditionsInput = {
    set: InputJsonValue[]
  }

  export type LotteryLikeCreateprizesInput = {
    set: InputJsonValue[]
  }

  export type UserCreateNestedOneWithoutOwnedLotteriesLikeInput = {
    create?: XOR<UserCreateWithoutOwnedLotteriesLikeInput, UserUncheckedCreateWithoutOwnedLotteriesLikeInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedLotteriesLikeInput
    connect?: UserWhereUniqueInput
  }

  export type TicketCreateNestedManyWithoutLotteryLikeInput = {
    create?: XOR<TicketCreateWithoutLotteryLikeInput, TicketUncheckedCreateWithoutLotteryLikeInput> | TicketCreateWithoutLotteryLikeInput[] | TicketUncheckedCreateWithoutLotteryLikeInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutLotteryLikeInput | TicketCreateOrConnectWithoutLotteryLikeInput[]
    createMany?: TicketCreateManyLotteryLikeInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutLotteryLikeInput = {
    create?: XOR<TicketCreateWithoutLotteryLikeInput, TicketUncheckedCreateWithoutLotteryLikeInput> | TicketCreateWithoutLotteryLikeInput[] | TicketUncheckedCreateWithoutLotteryLikeInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutLotteryLikeInput | TicketCreateOrConnectWithoutLotteryLikeInput[]
    createMany?: TicketCreateManyLotteryLikeInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumLotteryStatusFieldUpdateOperationsInput = {
    set?: $Enums.LotteryStatus
  }

  export type LotteryLikeUpdateconditionsInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type LotteryLikeUpdateprizesInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type UserUpdateOneRequiredWithoutOwnedLotteriesLikeNestedInput = {
    create?: XOR<UserCreateWithoutOwnedLotteriesLikeInput, UserUncheckedCreateWithoutOwnedLotteriesLikeInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedLotteriesLikeInput
    upsert?: UserUpsertWithoutOwnedLotteriesLikeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedLotteriesLikeInput, UserUpdateWithoutOwnedLotteriesLikeInput>, UserUncheckedUpdateWithoutOwnedLotteriesLikeInput>
  }

  export type TicketUpdateManyWithoutLotteryLikeNestedInput = {
    create?: XOR<TicketCreateWithoutLotteryLikeInput, TicketUncheckedCreateWithoutLotteryLikeInput> | TicketCreateWithoutLotteryLikeInput[] | TicketUncheckedCreateWithoutLotteryLikeInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutLotteryLikeInput | TicketCreateOrConnectWithoutLotteryLikeInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutLotteryLikeInput | TicketUpsertWithWhereUniqueWithoutLotteryLikeInput[]
    createMany?: TicketCreateManyLotteryLikeInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutLotteryLikeInput | TicketUpdateWithWhereUniqueWithoutLotteryLikeInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutLotteryLikeInput | TicketUpdateManyWithWhereWithoutLotteryLikeInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutLotteryLikeNestedInput = {
    create?: XOR<TicketCreateWithoutLotteryLikeInput, TicketUncheckedCreateWithoutLotteryLikeInput> | TicketCreateWithoutLotteryLikeInput[] | TicketUncheckedCreateWithoutLotteryLikeInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutLotteryLikeInput | TicketCreateOrConnectWithoutLotteryLikeInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutLotteryLikeInput | TicketUpsertWithWhereUniqueWithoutLotteryLikeInput[]
    createMany?: TicketCreateManyLotteryLikeInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutLotteryLikeInput | TicketUpdateWithWhereUniqueWithoutLotteryLikeInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutLotteryLikeInput | TicketUpdateManyWithWhereWithoutLotteryLikeInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type LotteryFundraisingCreateprizesInput = {
    set: InputJsonValue[]
  }

  export type UserCreateNestedOneWithoutOwnedLotteriesFundraisingInput = {
    create?: XOR<UserCreateWithoutOwnedLotteriesFundraisingInput, UserUncheckedCreateWithoutOwnedLotteriesFundraisingInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedLotteriesFundraisingInput
    connect?: UserWhereUniqueInput
  }

  export type TicketCreateNestedManyWithoutLotteryFundraisingInput = {
    create?: XOR<TicketCreateWithoutLotteryFundraisingInput, TicketUncheckedCreateWithoutLotteryFundraisingInput> | TicketCreateWithoutLotteryFundraisingInput[] | TicketUncheckedCreateWithoutLotteryFundraisingInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutLotteryFundraisingInput | TicketCreateOrConnectWithoutLotteryFundraisingInput[]
    createMany?: TicketCreateManyLotteryFundraisingInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutLotteryFundraisingInput = {
    create?: XOR<TicketCreateWithoutLotteryFundraisingInput, TicketUncheckedCreateWithoutLotteryFundraisingInput> | TicketCreateWithoutLotteryFundraisingInput[] | TicketUncheckedCreateWithoutLotteryFundraisingInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutLotteryFundraisingInput | TicketCreateOrConnectWithoutLotteryFundraisingInput[]
    createMany?: TicketCreateManyLotteryFundraisingInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type LotteryFundraisingUpdateprizesInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type UserUpdateOneRequiredWithoutOwnedLotteriesFundraisingNestedInput = {
    create?: XOR<UserCreateWithoutOwnedLotteriesFundraisingInput, UserUncheckedCreateWithoutOwnedLotteriesFundraisingInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedLotteriesFundraisingInput
    upsert?: UserUpsertWithoutOwnedLotteriesFundraisingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedLotteriesFundraisingInput, UserUpdateWithoutOwnedLotteriesFundraisingInput>, UserUncheckedUpdateWithoutOwnedLotteriesFundraisingInput>
  }

  export type TicketUpdateManyWithoutLotteryFundraisingNestedInput = {
    create?: XOR<TicketCreateWithoutLotteryFundraisingInput, TicketUncheckedCreateWithoutLotteryFundraisingInput> | TicketCreateWithoutLotteryFundraisingInput[] | TicketUncheckedCreateWithoutLotteryFundraisingInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutLotteryFundraisingInput | TicketCreateOrConnectWithoutLotteryFundraisingInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutLotteryFundraisingInput | TicketUpsertWithWhereUniqueWithoutLotteryFundraisingInput[]
    createMany?: TicketCreateManyLotteryFundraisingInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutLotteryFundraisingInput | TicketUpdateWithWhereUniqueWithoutLotteryFundraisingInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutLotteryFundraisingInput | TicketUpdateManyWithWhereWithoutLotteryFundraisingInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutLotteryFundraisingNestedInput = {
    create?: XOR<TicketCreateWithoutLotteryFundraisingInput, TicketUncheckedCreateWithoutLotteryFundraisingInput> | TicketCreateWithoutLotteryFundraisingInput[] | TicketUncheckedCreateWithoutLotteryFundraisingInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutLotteryFundraisingInput | TicketCreateOrConnectWithoutLotteryFundraisingInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutLotteryFundraisingInput | TicketUpsertWithWhereUniqueWithoutLotteryFundraisingInput[]
    createMany?: TicketCreateManyLotteryFundraisingInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutLotteryFundraisingInput | TicketUpdateWithWhereUniqueWithoutLotteryFundraisingInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutLotteryFundraisingInput | TicketUpdateManyWithWhereWithoutLotteryFundraisingInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type LotteryClassicCreateprizesInput = {
    set: InputJsonValue[]
  }

  export type UserCreateNestedOneWithoutOwnedLotteriesClassicInput = {
    create?: XOR<UserCreateWithoutOwnedLotteriesClassicInput, UserUncheckedCreateWithoutOwnedLotteriesClassicInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedLotteriesClassicInput
    connect?: UserWhereUniqueInput
  }

  export type TicketCreateNestedManyWithoutLotteryClassicInput = {
    create?: XOR<TicketCreateWithoutLotteryClassicInput, TicketUncheckedCreateWithoutLotteryClassicInput> | TicketCreateWithoutLotteryClassicInput[] | TicketUncheckedCreateWithoutLotteryClassicInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutLotteryClassicInput | TicketCreateOrConnectWithoutLotteryClassicInput[]
    createMany?: TicketCreateManyLotteryClassicInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutLotteryClassicInput = {
    create?: XOR<TicketCreateWithoutLotteryClassicInput, TicketUncheckedCreateWithoutLotteryClassicInput> | TicketCreateWithoutLotteryClassicInput[] | TicketUncheckedCreateWithoutLotteryClassicInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutLotteryClassicInput | TicketCreateOrConnectWithoutLotteryClassicInput[]
    createMany?: TicketCreateManyLotteryClassicInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type LotteryClassicUpdateprizesInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type UserUpdateOneRequiredWithoutOwnedLotteriesClassicNestedInput = {
    create?: XOR<UserCreateWithoutOwnedLotteriesClassicInput, UserUncheckedCreateWithoutOwnedLotteriesClassicInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedLotteriesClassicInput
    upsert?: UserUpsertWithoutOwnedLotteriesClassicInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedLotteriesClassicInput, UserUpdateWithoutOwnedLotteriesClassicInput>, UserUncheckedUpdateWithoutOwnedLotteriesClassicInput>
  }

  export type TicketUpdateManyWithoutLotteryClassicNestedInput = {
    create?: XOR<TicketCreateWithoutLotteryClassicInput, TicketUncheckedCreateWithoutLotteryClassicInput> | TicketCreateWithoutLotteryClassicInput[] | TicketUncheckedCreateWithoutLotteryClassicInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutLotteryClassicInput | TicketCreateOrConnectWithoutLotteryClassicInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutLotteryClassicInput | TicketUpsertWithWhereUniqueWithoutLotteryClassicInput[]
    createMany?: TicketCreateManyLotteryClassicInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutLotteryClassicInput | TicketUpdateWithWhereUniqueWithoutLotteryClassicInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutLotteryClassicInput | TicketUpdateManyWithWhereWithoutLotteryClassicInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutLotteryClassicNestedInput = {
    create?: XOR<TicketCreateWithoutLotteryClassicInput, TicketUncheckedCreateWithoutLotteryClassicInput> | TicketCreateWithoutLotteryClassicInput[] | TicketUncheckedCreateWithoutLotteryClassicInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutLotteryClassicInput | TicketCreateOrConnectWithoutLotteryClassicInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutLotteryClassicInput | TicketUpsertWithWhereUniqueWithoutLotteryClassicInput[]
    createMany?: TicketCreateManyLotteryClassicInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutLotteryClassicInput | TicketUpdateWithWhereUniqueWithoutLotteryClassicInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutLotteryClassicInput | TicketUpdateManyWithWhereWithoutLotteryClassicInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type LotteryClassicCreateNestedOneWithoutTicketsInput = {
    create?: XOR<LotteryClassicCreateWithoutTicketsInput, LotteryClassicUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: LotteryClassicCreateOrConnectWithoutTicketsInput
    connect?: LotteryClassicWhereUniqueInput
  }

  export type LotteryLikeCreateNestedOneWithoutTicketsInput = {
    create?: XOR<LotteryLikeCreateWithoutTicketsInput, LotteryLikeUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: LotteryLikeCreateOrConnectWithoutTicketsInput
    connect?: LotteryLikeWhereUniqueInput
  }

  export type LotteryFundraisingCreateNestedOneWithoutTicketsInput = {
    create?: XOR<LotteryFundraisingCreateWithoutTicketsInput, LotteryFundraisingUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: LotteryFundraisingCreateOrConnectWithoutTicketsInput
    connect?: LotteryFundraisingWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTicketsInput = {
    create?: XOR<UserCreateWithoutTicketsInput, UserUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTicketsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumLotteryTypeFieldUpdateOperationsInput = {
    set?: $Enums.LotteryType
  }

  export type EnumTicketStatusFieldUpdateOperationsInput = {
    set?: $Enums.TicketStatus
  }

  export type LotteryClassicUpdateOneWithoutTicketsNestedInput = {
    create?: XOR<LotteryClassicCreateWithoutTicketsInput, LotteryClassicUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: LotteryClassicCreateOrConnectWithoutTicketsInput
    upsert?: LotteryClassicUpsertWithoutTicketsInput
    disconnect?: boolean
    delete?: LotteryClassicWhereInput | boolean
    connect?: LotteryClassicWhereUniqueInput
    update?: XOR<XOR<LotteryClassicUpdateToOneWithWhereWithoutTicketsInput, LotteryClassicUpdateWithoutTicketsInput>, LotteryClassicUncheckedUpdateWithoutTicketsInput>
  }

  export type LotteryLikeUpdateOneWithoutTicketsNestedInput = {
    create?: XOR<LotteryLikeCreateWithoutTicketsInput, LotteryLikeUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: LotteryLikeCreateOrConnectWithoutTicketsInput
    upsert?: LotteryLikeUpsertWithoutTicketsInput
    disconnect?: boolean
    delete?: LotteryLikeWhereInput | boolean
    connect?: LotteryLikeWhereUniqueInput
    update?: XOR<XOR<LotteryLikeUpdateToOneWithWhereWithoutTicketsInput, LotteryLikeUpdateWithoutTicketsInput>, LotteryLikeUncheckedUpdateWithoutTicketsInput>
  }

  export type LotteryFundraisingUpdateOneWithoutTicketsNestedInput = {
    create?: XOR<LotteryFundraisingCreateWithoutTicketsInput, LotteryFundraisingUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: LotteryFundraisingCreateOrConnectWithoutTicketsInput
    upsert?: LotteryFundraisingUpsertWithoutTicketsInput
    disconnect?: boolean
    delete?: LotteryFundraisingWhereInput | boolean
    connect?: LotteryFundraisingWhereUniqueInput
    update?: XOR<XOR<LotteryFundraisingUpdateToOneWithWhereWithoutTicketsInput, LotteryFundraisingUpdateWithoutTicketsInput>, LotteryFundraisingUncheckedUpdateWithoutTicketsInput>
  }

  export type UserUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<UserCreateWithoutTicketsInput, UserUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTicketsInput
    upsert?: UserUpsertWithoutTicketsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTicketsInput, UserUpdateWithoutTicketsInput>, UserUncheckedUpdateWithoutTicketsInput>
  }

  export type UserCreateNestedOneWithoutTransactionHistoryInput = {
    create?: XOR<UserCreateWithoutTransactionHistoryInput, UserUncheckedCreateWithoutTransactionHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type EnumTransactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.TransactionType
  }

  export type UserUpdateOneRequiredWithoutTransactionHistoryNestedInput = {
    create?: XOR<UserCreateWithoutTransactionHistoryInput, UserUncheckedCreateWithoutTransactionHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionHistoryInput
    upsert?: UserUpsertWithoutTransactionHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionHistoryInput, UserUpdateWithoutTransactionHistoryInput>, UserUncheckedUpdateWithoutTransactionHistoryInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumAccountStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountStatusFilter<$PrismaModel> | $Enums.AccountStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumAccountStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountStatusWithAggregatesFilter<$PrismaModel> | $Enums.AccountStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountStatusFilter<$PrismaModel>
    _max?: NestedEnumAccountStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumLotteryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LotteryStatus | EnumLotteryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LotteryStatus[] | ListEnumLotteryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LotteryStatus[] | ListEnumLotteryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLotteryStatusFilter<$PrismaModel> | $Enums.LotteryStatus
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumLotteryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LotteryStatus | EnumLotteryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LotteryStatus[] | ListEnumLotteryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LotteryStatus[] | ListEnumLotteryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLotteryStatusWithAggregatesFilter<$PrismaModel> | $Enums.LotteryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLotteryStatusFilter<$PrismaModel>
    _max?: NestedEnumLotteryStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type NestedEnumLotteryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LotteryType | EnumLotteryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LotteryType[] | ListEnumLotteryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LotteryType[] | ListEnumLotteryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLotteryTypeFilter<$PrismaModel> | $Enums.LotteryType
  }

  export type NestedEnumTicketStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketStatus | EnumTicketStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTicketStatusFilter<$PrismaModel> | $Enums.TicketStatus
  }

  export type NestedEnumLotteryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LotteryType | EnumLotteryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LotteryType[] | ListEnumLotteryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LotteryType[] | ListEnumLotteryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLotteryTypeWithAggregatesFilter<$PrismaModel> | $Enums.LotteryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLotteryTypeFilter<$PrismaModel>
    _max?: NestedEnumLotteryTypeFilter<$PrismaModel>
  }

  export type NestedEnumTicketStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketStatus | EnumTicketStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTicketStatusWithAggregatesFilter<$PrismaModel> | $Enums.TicketStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTicketStatusFilter<$PrismaModel>
    _max?: NestedEnumTicketStatusFilter<$PrismaModel>
  }

  export type NestedEnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type TicketCreateWithoutUserInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
    lotteryClassic?: LotteryClassicCreateNestedOneWithoutTicketsInput
    lotteryLike?: LotteryLikeCreateNestedOneWithoutTicketsInput
    lotteryFundraising?: LotteryFundraisingCreateNestedOneWithoutTicketsInput
  }

  export type TicketUncheckedCreateWithoutUserInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    lotteryId: string
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
  }

  export type TicketCreateOrConnectWithoutUserInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutUserInput, TicketUncheckedCreateWithoutUserInput>
  }

  export type TicketCreateManyUserInputEnvelope = {
    data: TicketCreateManyUserInput | TicketCreateManyUserInput[]
  }

  export type LotteryLikeCreateWithoutOwnerInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    conditions?: LotteryLikeCreateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeCreateprizesInput | InputJsonValue[]
    link: string
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    tickets?: TicketCreateNestedManyWithoutLotteryLikeInput
  }

  export type LotteryLikeUncheckedCreateWithoutOwnerInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    conditions?: LotteryLikeCreateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeCreateprizesInput | InputJsonValue[]
    link: string
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    tickets?: TicketUncheckedCreateNestedManyWithoutLotteryLikeInput
  }

  export type LotteryLikeCreateOrConnectWithoutOwnerInput = {
    where: LotteryLikeWhereUniqueInput
    create: XOR<LotteryLikeCreateWithoutOwnerInput, LotteryLikeUncheckedCreateWithoutOwnerInput>
  }

  export type LotteryLikeCreateManyOwnerInputEnvelope = {
    data: LotteryLikeCreateManyOwnerInput | LotteryLikeCreateManyOwnerInput[]
  }

  export type LotteryFundraisingCreateWithoutOwnerInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    price: number
    prizes?: LotteryFundraisingCreateprizesInput | InputJsonValue[]
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    tickets?: TicketCreateNestedManyWithoutLotteryFundraisingInput
  }

  export type LotteryFundraisingUncheckedCreateWithoutOwnerInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    price: number
    prizes?: LotteryFundraisingCreateprizesInput | InputJsonValue[]
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    tickets?: TicketUncheckedCreateNestedManyWithoutLotteryFundraisingInput
  }

  export type LotteryFundraisingCreateOrConnectWithoutOwnerInput = {
    where: LotteryFundraisingWhereUniqueInput
    create: XOR<LotteryFundraisingCreateWithoutOwnerInput, LotteryFundraisingUncheckedCreateWithoutOwnerInput>
  }

  export type LotteryFundraisingCreateManyOwnerInputEnvelope = {
    data: LotteryFundraisingCreateManyOwnerInput | LotteryFundraisingCreateManyOwnerInput[]
  }

  export type LotteryClassicCreateWithoutOwnerInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    availableNumberRange: number
    drawnNumbersCount: number
    price: number
    prizes?: LotteryClassicCreateprizesInput | InputJsonValue[]
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    winningNumbers?: InputJsonValue | null
    tickets?: TicketCreateNestedManyWithoutLotteryClassicInput
  }

  export type LotteryClassicUncheckedCreateWithoutOwnerInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    availableNumberRange: number
    drawnNumbersCount: number
    price: number
    prizes?: LotteryClassicCreateprizesInput | InputJsonValue[]
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    winningNumbers?: InputJsonValue | null
    tickets?: TicketUncheckedCreateNestedManyWithoutLotteryClassicInput
  }

  export type LotteryClassicCreateOrConnectWithoutOwnerInput = {
    where: LotteryClassicWhereUniqueInput
    create: XOR<LotteryClassicCreateWithoutOwnerInput, LotteryClassicUncheckedCreateWithoutOwnerInput>
  }

  export type LotteryClassicCreateManyOwnerInputEnvelope = {
    data: LotteryClassicCreateManyOwnerInput | LotteryClassicCreateManyOwnerInput[]
  }

  export type TransactionCreateWithoutUserInput = {
    id?: string
    amount: number
    transactionType: $Enums.TransactionType
    creditCard?: string | null
    createdAt?: Date | string
  }

  export type TransactionUncheckedCreateWithoutUserInput = {
    id?: string
    amount: number
    transactionType: $Enums.TransactionType
    creditCard?: string | null
    createdAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutUserInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionCreateManyUserInputEnvelope = {
    data: TransactionCreateManyUserInput | TransactionCreateManyUserInput[]
  }

  export type TicketUpsertWithWhereUniqueWithoutUserInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutUserInput, TicketUncheckedUpdateWithoutUserInput>
    create: XOR<TicketCreateWithoutUserInput, TicketUncheckedCreateWithoutUserInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutUserInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutUserInput, TicketUncheckedUpdateWithoutUserInput>
  }

  export type TicketUpdateManyWithWhereWithoutUserInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutUserInput>
  }

  export type TicketScalarWhereInput = {
    AND?: TicketScalarWhereInput | TicketScalarWhereInput[]
    OR?: TicketScalarWhereInput[]
    NOT?: TicketScalarWhereInput | TicketScalarWhereInput[]
    id?: StringFilter<"Ticket"> | string
    lotteryType?: EnumLotteryTypeFilter<"Ticket"> | $Enums.LotteryType
    lotteryId?: StringFilter<"Ticket"> | string
    ticketNumber?: StringFilter<"Ticket"> | string
    purchaseDate?: DateTimeFilter<"Ticket"> | Date | string
    status?: EnumTicketStatusFilter<"Ticket"> | $Enums.TicketStatus
    numbers?: JsonNullableFilter<"Ticket">
    userEmail?: StringFilter<"Ticket"> | string
  }

  export type LotteryLikeUpsertWithWhereUniqueWithoutOwnerInput = {
    where: LotteryLikeWhereUniqueInput
    update: XOR<LotteryLikeUpdateWithoutOwnerInput, LotteryLikeUncheckedUpdateWithoutOwnerInput>
    create: XOR<LotteryLikeCreateWithoutOwnerInput, LotteryLikeUncheckedCreateWithoutOwnerInput>
  }

  export type LotteryLikeUpdateWithWhereUniqueWithoutOwnerInput = {
    where: LotteryLikeWhereUniqueInput
    data: XOR<LotteryLikeUpdateWithoutOwnerInput, LotteryLikeUncheckedUpdateWithoutOwnerInput>
  }

  export type LotteryLikeUpdateManyWithWhereWithoutOwnerInput = {
    where: LotteryLikeScalarWhereInput
    data: XOR<LotteryLikeUpdateManyMutationInput, LotteryLikeUncheckedUpdateManyWithoutOwnerInput>
  }

  export type LotteryLikeScalarWhereInput = {
    AND?: LotteryLikeScalarWhereInput | LotteryLikeScalarWhereInput[]
    OR?: LotteryLikeScalarWhereInput[]
    NOT?: LotteryLikeScalarWhereInput | LotteryLikeScalarWhereInput[]
    id?: StringFilter<"LotteryLike"> | string
    hosted?: StringFilter<"LotteryLike"> | string
    title?: StringNullableFilter<"LotteryLike"> | string | null
    description?: StringNullableFilter<"LotteryLike"> | string | null
    image?: StringNullableFilter<"LotteryLike"> | string | null
    paticipationdescription?: StringNullableFilter<"LotteryLike"> | string | null
    startDate?: DateTimeFilter<"LotteryLike"> | Date | string
    endDate?: DateTimeFilter<"LotteryLike"> | Date | string
    lotteryStatus?: EnumLotteryStatusFilter<"LotteryLike"> | $Enums.LotteryStatus
    createdAt?: DateTimeFilter<"LotteryLike"> | Date | string
    updatedAt?: DateTimeFilter<"LotteryLike"> | Date | string
    conditions?: JsonNullableListFilter<"LotteryLike">
    prizes?: JsonNullableListFilter<"LotteryLike">
    link?: StringFilter<"LotteryLike"> | string
    ownerEmail?: StringFilter<"LotteryLike"> | string
    participantCount?: IntNullableFilter<"LotteryLike"> | number | null
    winnersTickets?: JsonNullableFilter<"LotteryLike">
  }

  export type LotteryFundraisingUpsertWithWhereUniqueWithoutOwnerInput = {
    where: LotteryFundraisingWhereUniqueInput
    update: XOR<LotteryFundraisingUpdateWithoutOwnerInput, LotteryFundraisingUncheckedUpdateWithoutOwnerInput>
    create: XOR<LotteryFundraisingCreateWithoutOwnerInput, LotteryFundraisingUncheckedCreateWithoutOwnerInput>
  }

  export type LotteryFundraisingUpdateWithWhereUniqueWithoutOwnerInput = {
    where: LotteryFundraisingWhereUniqueInput
    data: XOR<LotteryFundraisingUpdateWithoutOwnerInput, LotteryFundraisingUncheckedUpdateWithoutOwnerInput>
  }

  export type LotteryFundraisingUpdateManyWithWhereWithoutOwnerInput = {
    where: LotteryFundraisingScalarWhereInput
    data: XOR<LotteryFundraisingUpdateManyMutationInput, LotteryFundraisingUncheckedUpdateManyWithoutOwnerInput>
  }

  export type LotteryFundraisingScalarWhereInput = {
    AND?: LotteryFundraisingScalarWhereInput | LotteryFundraisingScalarWhereInput[]
    OR?: LotteryFundraisingScalarWhereInput[]
    NOT?: LotteryFundraisingScalarWhereInput | LotteryFundraisingScalarWhereInput[]
    id?: StringFilter<"LotteryFundraising"> | string
    hosted?: StringFilter<"LotteryFundraising"> | string
    title?: StringNullableFilter<"LotteryFundraising"> | string | null
    description?: StringNullableFilter<"LotteryFundraising"> | string | null
    image?: StringNullableFilter<"LotteryFundraising"> | string | null
    paticipationdescription?: StringNullableFilter<"LotteryFundraising"> | string | null
    startDate?: DateTimeFilter<"LotteryFundraising"> | Date | string
    endDate?: DateTimeFilter<"LotteryFundraising"> | Date | string
    lotteryStatus?: EnumLotteryStatusFilter<"LotteryFundraising"> | $Enums.LotteryStatus
    createdAt?: DateTimeFilter<"LotteryFundraising"> | Date | string
    updatedAt?: DateTimeFilter<"LotteryFundraising"> | Date | string
    price?: IntFilter<"LotteryFundraising"> | number
    prizes?: JsonNullableListFilter<"LotteryFundraising">
    ownerEmail?: StringFilter<"LotteryFundraising"> | string
    participantCount?: IntNullableFilter<"LotteryFundraising"> | number | null
    winnersTickets?: JsonNullableFilter<"LotteryFundraising">
  }

  export type LotteryClassicUpsertWithWhereUniqueWithoutOwnerInput = {
    where: LotteryClassicWhereUniqueInput
    update: XOR<LotteryClassicUpdateWithoutOwnerInput, LotteryClassicUncheckedUpdateWithoutOwnerInput>
    create: XOR<LotteryClassicCreateWithoutOwnerInput, LotteryClassicUncheckedCreateWithoutOwnerInput>
  }

  export type LotteryClassicUpdateWithWhereUniqueWithoutOwnerInput = {
    where: LotteryClassicWhereUniqueInput
    data: XOR<LotteryClassicUpdateWithoutOwnerInput, LotteryClassicUncheckedUpdateWithoutOwnerInput>
  }

  export type LotteryClassicUpdateManyWithWhereWithoutOwnerInput = {
    where: LotteryClassicScalarWhereInput
    data: XOR<LotteryClassicUpdateManyMutationInput, LotteryClassicUncheckedUpdateManyWithoutOwnerInput>
  }

  export type LotteryClassicScalarWhereInput = {
    AND?: LotteryClassicScalarWhereInput | LotteryClassicScalarWhereInput[]
    OR?: LotteryClassicScalarWhereInput[]
    NOT?: LotteryClassicScalarWhereInput | LotteryClassicScalarWhereInput[]
    id?: StringFilter<"LotteryClassic"> | string
    hosted?: StringFilter<"LotteryClassic"> | string
    title?: StringNullableFilter<"LotteryClassic"> | string | null
    description?: StringNullableFilter<"LotteryClassic"> | string | null
    image?: StringNullableFilter<"LotteryClassic"> | string | null
    paticipationdescription?: StringNullableFilter<"LotteryClassic"> | string | null
    startDate?: DateTimeFilter<"LotteryClassic"> | Date | string
    endDate?: DateTimeFilter<"LotteryClassic"> | Date | string
    lotteryStatus?: EnumLotteryStatusFilter<"LotteryClassic"> | $Enums.LotteryStatus
    createdAt?: DateTimeFilter<"LotteryClassic"> | Date | string
    updatedAt?: DateTimeFilter<"LotteryClassic"> | Date | string
    availableNumberRange?: IntFilter<"LotteryClassic"> | number
    drawnNumbersCount?: IntFilter<"LotteryClassic"> | number
    price?: IntFilter<"LotteryClassic"> | number
    prizes?: JsonNullableListFilter<"LotteryClassic">
    ownerEmail?: StringFilter<"LotteryClassic"> | string
    participantCount?: IntNullableFilter<"LotteryClassic"> | number | null
    winnersTickets?: JsonNullableFilter<"LotteryClassic">
    winningNumbers?: JsonNullableFilter<"LotteryClassic">
  }

  export type TransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
  }

  export type TransactionUpdateManyWithWhereWithoutUserInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    amount?: IntFilter<"Transaction"> | number
    transactionType?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    creditCard?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    userId?: StringFilter<"Transaction"> | string
  }

  export type UserCreateWithoutOwnedLotteriesLikeInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    fullName?: string | null
    email: string
    picture?: string | null
    balance?: number
    accountStatus?: $Enums.AccountStatus
    DataOfBirth?: Date | string | null
    tickets?: TicketCreateNestedManyWithoutUserInput
    ownedLotteriesFundraising?: LotteryFundraisingCreateNestedManyWithoutOwnerInput
    ownedLotteriesClassic?: LotteryClassicCreateNestedManyWithoutOwnerInput
    transactionHistory?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOwnedLotteriesLikeInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    fullName?: string | null
    email: string
    picture?: string | null
    balance?: number
    accountStatus?: $Enums.AccountStatus
    DataOfBirth?: Date | string | null
    tickets?: TicketUncheckedCreateNestedManyWithoutUserInput
    ownedLotteriesFundraising?: LotteryFundraisingUncheckedCreateNestedManyWithoutOwnerInput
    ownedLotteriesClassic?: LotteryClassicUncheckedCreateNestedManyWithoutOwnerInput
    transactionHistory?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOwnedLotteriesLikeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedLotteriesLikeInput, UserUncheckedCreateWithoutOwnedLotteriesLikeInput>
  }

  export type TicketCreateWithoutLotteryLikeInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
    lotteryClassic?: LotteryClassicCreateNestedOneWithoutTicketsInput
    lotteryFundraising?: LotteryFundraisingCreateNestedOneWithoutTicketsInput
    user: UserCreateNestedOneWithoutTicketsInput
  }

  export type TicketUncheckedCreateWithoutLotteryLikeInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
    userEmail: string
  }

  export type TicketCreateOrConnectWithoutLotteryLikeInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutLotteryLikeInput, TicketUncheckedCreateWithoutLotteryLikeInput>
  }

  export type TicketCreateManyLotteryLikeInputEnvelope = {
    data: TicketCreateManyLotteryLikeInput | TicketCreateManyLotteryLikeInput[]
  }

  export type UserUpsertWithoutOwnedLotteriesLikeInput = {
    update: XOR<UserUpdateWithoutOwnedLotteriesLikeInput, UserUncheckedUpdateWithoutOwnedLotteriesLikeInput>
    create: XOR<UserCreateWithoutOwnedLotteriesLikeInput, UserUncheckedCreateWithoutOwnedLotteriesLikeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedLotteriesLikeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedLotteriesLikeInput, UserUncheckedUpdateWithoutOwnedLotteriesLikeInput>
  }

  export type UserUpdateWithoutOwnedLotteriesLikeInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    accountStatus?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    DataOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketUpdateManyWithoutUserNestedInput
    ownedLotteriesFundraising?: LotteryFundraisingUpdateManyWithoutOwnerNestedInput
    ownedLotteriesClassic?: LotteryClassicUpdateManyWithoutOwnerNestedInput
    transactionHistory?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedLotteriesLikeInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    accountStatus?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    DataOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketUncheckedUpdateManyWithoutUserNestedInput
    ownedLotteriesFundraising?: LotteryFundraisingUncheckedUpdateManyWithoutOwnerNestedInput
    ownedLotteriesClassic?: LotteryClassicUncheckedUpdateManyWithoutOwnerNestedInput
    transactionHistory?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TicketUpsertWithWhereUniqueWithoutLotteryLikeInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutLotteryLikeInput, TicketUncheckedUpdateWithoutLotteryLikeInput>
    create: XOR<TicketCreateWithoutLotteryLikeInput, TicketUncheckedCreateWithoutLotteryLikeInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutLotteryLikeInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutLotteryLikeInput, TicketUncheckedUpdateWithoutLotteryLikeInput>
  }

  export type TicketUpdateManyWithWhereWithoutLotteryLikeInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutLotteryLikeInput>
  }

  export type UserCreateWithoutOwnedLotteriesFundraisingInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    fullName?: string | null
    email: string
    picture?: string | null
    balance?: number
    accountStatus?: $Enums.AccountStatus
    DataOfBirth?: Date | string | null
    tickets?: TicketCreateNestedManyWithoutUserInput
    ownedLotteriesLike?: LotteryLikeCreateNestedManyWithoutOwnerInput
    ownedLotteriesClassic?: LotteryClassicCreateNestedManyWithoutOwnerInput
    transactionHistory?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOwnedLotteriesFundraisingInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    fullName?: string | null
    email: string
    picture?: string | null
    balance?: number
    accountStatus?: $Enums.AccountStatus
    DataOfBirth?: Date | string | null
    tickets?: TicketUncheckedCreateNestedManyWithoutUserInput
    ownedLotteriesLike?: LotteryLikeUncheckedCreateNestedManyWithoutOwnerInput
    ownedLotteriesClassic?: LotteryClassicUncheckedCreateNestedManyWithoutOwnerInput
    transactionHistory?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOwnedLotteriesFundraisingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedLotteriesFundraisingInput, UserUncheckedCreateWithoutOwnedLotteriesFundraisingInput>
  }

  export type TicketCreateWithoutLotteryFundraisingInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
    lotteryClassic?: LotteryClassicCreateNestedOneWithoutTicketsInput
    lotteryLike?: LotteryLikeCreateNestedOneWithoutTicketsInput
    user: UserCreateNestedOneWithoutTicketsInput
  }

  export type TicketUncheckedCreateWithoutLotteryFundraisingInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
    userEmail: string
  }

  export type TicketCreateOrConnectWithoutLotteryFundraisingInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutLotteryFundraisingInput, TicketUncheckedCreateWithoutLotteryFundraisingInput>
  }

  export type TicketCreateManyLotteryFundraisingInputEnvelope = {
    data: TicketCreateManyLotteryFundraisingInput | TicketCreateManyLotteryFundraisingInput[]
  }

  export type UserUpsertWithoutOwnedLotteriesFundraisingInput = {
    update: XOR<UserUpdateWithoutOwnedLotteriesFundraisingInput, UserUncheckedUpdateWithoutOwnedLotteriesFundraisingInput>
    create: XOR<UserCreateWithoutOwnedLotteriesFundraisingInput, UserUncheckedCreateWithoutOwnedLotteriesFundraisingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedLotteriesFundraisingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedLotteriesFundraisingInput, UserUncheckedUpdateWithoutOwnedLotteriesFundraisingInput>
  }

  export type UserUpdateWithoutOwnedLotteriesFundraisingInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    accountStatus?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    DataOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketUpdateManyWithoutUserNestedInput
    ownedLotteriesLike?: LotteryLikeUpdateManyWithoutOwnerNestedInput
    ownedLotteriesClassic?: LotteryClassicUpdateManyWithoutOwnerNestedInput
    transactionHistory?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedLotteriesFundraisingInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    accountStatus?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    DataOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketUncheckedUpdateManyWithoutUserNestedInput
    ownedLotteriesLike?: LotteryLikeUncheckedUpdateManyWithoutOwnerNestedInput
    ownedLotteriesClassic?: LotteryClassicUncheckedUpdateManyWithoutOwnerNestedInput
    transactionHistory?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TicketUpsertWithWhereUniqueWithoutLotteryFundraisingInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutLotteryFundraisingInput, TicketUncheckedUpdateWithoutLotteryFundraisingInput>
    create: XOR<TicketCreateWithoutLotteryFundraisingInput, TicketUncheckedCreateWithoutLotteryFundraisingInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutLotteryFundraisingInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutLotteryFundraisingInput, TicketUncheckedUpdateWithoutLotteryFundraisingInput>
  }

  export type TicketUpdateManyWithWhereWithoutLotteryFundraisingInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutLotteryFundraisingInput>
  }

  export type UserCreateWithoutOwnedLotteriesClassicInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    fullName?: string | null
    email: string
    picture?: string | null
    balance?: number
    accountStatus?: $Enums.AccountStatus
    DataOfBirth?: Date | string | null
    tickets?: TicketCreateNestedManyWithoutUserInput
    ownedLotteriesLike?: LotteryLikeCreateNestedManyWithoutOwnerInput
    ownedLotteriesFundraising?: LotteryFundraisingCreateNestedManyWithoutOwnerInput
    transactionHistory?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOwnedLotteriesClassicInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    fullName?: string | null
    email: string
    picture?: string | null
    balance?: number
    accountStatus?: $Enums.AccountStatus
    DataOfBirth?: Date | string | null
    tickets?: TicketUncheckedCreateNestedManyWithoutUserInput
    ownedLotteriesLike?: LotteryLikeUncheckedCreateNestedManyWithoutOwnerInput
    ownedLotteriesFundraising?: LotteryFundraisingUncheckedCreateNestedManyWithoutOwnerInput
    transactionHistory?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOwnedLotteriesClassicInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedLotteriesClassicInput, UserUncheckedCreateWithoutOwnedLotteriesClassicInput>
  }

  export type TicketCreateWithoutLotteryClassicInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
    lotteryLike?: LotteryLikeCreateNestedOneWithoutTicketsInput
    lotteryFundraising?: LotteryFundraisingCreateNestedOneWithoutTicketsInput
    user: UserCreateNestedOneWithoutTicketsInput
  }

  export type TicketUncheckedCreateWithoutLotteryClassicInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
    userEmail: string
  }

  export type TicketCreateOrConnectWithoutLotteryClassicInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutLotteryClassicInput, TicketUncheckedCreateWithoutLotteryClassicInput>
  }

  export type TicketCreateManyLotteryClassicInputEnvelope = {
    data: TicketCreateManyLotteryClassicInput | TicketCreateManyLotteryClassicInput[]
  }

  export type UserUpsertWithoutOwnedLotteriesClassicInput = {
    update: XOR<UserUpdateWithoutOwnedLotteriesClassicInput, UserUncheckedUpdateWithoutOwnedLotteriesClassicInput>
    create: XOR<UserCreateWithoutOwnedLotteriesClassicInput, UserUncheckedCreateWithoutOwnedLotteriesClassicInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedLotteriesClassicInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedLotteriesClassicInput, UserUncheckedUpdateWithoutOwnedLotteriesClassicInput>
  }

  export type UserUpdateWithoutOwnedLotteriesClassicInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    accountStatus?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    DataOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketUpdateManyWithoutUserNestedInput
    ownedLotteriesLike?: LotteryLikeUpdateManyWithoutOwnerNestedInput
    ownedLotteriesFundraising?: LotteryFundraisingUpdateManyWithoutOwnerNestedInput
    transactionHistory?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedLotteriesClassicInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    accountStatus?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    DataOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketUncheckedUpdateManyWithoutUserNestedInput
    ownedLotteriesLike?: LotteryLikeUncheckedUpdateManyWithoutOwnerNestedInput
    ownedLotteriesFundraising?: LotteryFundraisingUncheckedUpdateManyWithoutOwnerNestedInput
    transactionHistory?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TicketUpsertWithWhereUniqueWithoutLotteryClassicInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutLotteryClassicInput, TicketUncheckedUpdateWithoutLotteryClassicInput>
    create: XOR<TicketCreateWithoutLotteryClassicInput, TicketUncheckedCreateWithoutLotteryClassicInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutLotteryClassicInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutLotteryClassicInput, TicketUncheckedUpdateWithoutLotteryClassicInput>
  }

  export type TicketUpdateManyWithWhereWithoutLotteryClassicInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutLotteryClassicInput>
  }

  export type LotteryClassicCreateWithoutTicketsInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    availableNumberRange: number
    drawnNumbersCount: number
    price: number
    prizes?: LotteryClassicCreateprizesInput | InputJsonValue[]
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    winningNumbers?: InputJsonValue | null
    owner: UserCreateNestedOneWithoutOwnedLotteriesClassicInput
  }

  export type LotteryClassicUncheckedCreateWithoutTicketsInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    availableNumberRange: number
    drawnNumbersCount: number
    price: number
    prizes?: LotteryClassicCreateprizesInput | InputJsonValue[]
    ownerEmail: string
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    winningNumbers?: InputJsonValue | null
  }

  export type LotteryClassicCreateOrConnectWithoutTicketsInput = {
    where: LotteryClassicWhereUniqueInput
    create: XOR<LotteryClassicCreateWithoutTicketsInput, LotteryClassicUncheckedCreateWithoutTicketsInput>
  }

  export type LotteryLikeCreateWithoutTicketsInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    conditions?: LotteryLikeCreateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeCreateprizesInput | InputJsonValue[]
    link: string
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    owner: UserCreateNestedOneWithoutOwnedLotteriesLikeInput
  }

  export type LotteryLikeUncheckedCreateWithoutTicketsInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    conditions?: LotteryLikeCreateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeCreateprizesInput | InputJsonValue[]
    link: string
    ownerEmail: string
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
  }

  export type LotteryLikeCreateOrConnectWithoutTicketsInput = {
    where: LotteryLikeWhereUniqueInput
    create: XOR<LotteryLikeCreateWithoutTicketsInput, LotteryLikeUncheckedCreateWithoutTicketsInput>
  }

  export type LotteryFundraisingCreateWithoutTicketsInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    price: number
    prizes?: LotteryFundraisingCreateprizesInput | InputJsonValue[]
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    owner: UserCreateNestedOneWithoutOwnedLotteriesFundraisingInput
  }

  export type LotteryFundraisingUncheckedCreateWithoutTicketsInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    price: number
    prizes?: LotteryFundraisingCreateprizesInput | InputJsonValue[]
    ownerEmail: string
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
  }

  export type LotteryFundraisingCreateOrConnectWithoutTicketsInput = {
    where: LotteryFundraisingWhereUniqueInput
    create: XOR<LotteryFundraisingCreateWithoutTicketsInput, LotteryFundraisingUncheckedCreateWithoutTicketsInput>
  }

  export type UserCreateWithoutTicketsInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    fullName?: string | null
    email: string
    picture?: string | null
    balance?: number
    accountStatus?: $Enums.AccountStatus
    DataOfBirth?: Date | string | null
    ownedLotteriesLike?: LotteryLikeCreateNestedManyWithoutOwnerInput
    ownedLotteriesFundraising?: LotteryFundraisingCreateNestedManyWithoutOwnerInput
    ownedLotteriesClassic?: LotteryClassicCreateNestedManyWithoutOwnerInput
    transactionHistory?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTicketsInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    fullName?: string | null
    email: string
    picture?: string | null
    balance?: number
    accountStatus?: $Enums.AccountStatus
    DataOfBirth?: Date | string | null
    ownedLotteriesLike?: LotteryLikeUncheckedCreateNestedManyWithoutOwnerInput
    ownedLotteriesFundraising?: LotteryFundraisingUncheckedCreateNestedManyWithoutOwnerInput
    ownedLotteriesClassic?: LotteryClassicUncheckedCreateNestedManyWithoutOwnerInput
    transactionHistory?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTicketsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTicketsInput, UserUncheckedCreateWithoutTicketsInput>
  }

  export type LotteryClassicUpsertWithoutTicketsInput = {
    update: XOR<LotteryClassicUpdateWithoutTicketsInput, LotteryClassicUncheckedUpdateWithoutTicketsInput>
    create: XOR<LotteryClassicCreateWithoutTicketsInput, LotteryClassicUncheckedCreateWithoutTicketsInput>
    where?: LotteryClassicWhereInput
  }

  export type LotteryClassicUpdateToOneWithWhereWithoutTicketsInput = {
    where?: LotteryClassicWhereInput
    data: XOR<LotteryClassicUpdateWithoutTicketsInput, LotteryClassicUncheckedUpdateWithoutTicketsInput>
  }

  export type LotteryClassicUpdateWithoutTicketsInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availableNumberRange?: IntFieldUpdateOperationsInput | number
    drawnNumbersCount?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryClassicUpdateprizesInput | InputJsonValue[]
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    winningNumbers?: InputJsonValue | InputJsonValue | null
    owner?: UserUpdateOneRequiredWithoutOwnedLotteriesClassicNestedInput
  }

  export type LotteryClassicUncheckedUpdateWithoutTicketsInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availableNumberRange?: IntFieldUpdateOperationsInput | number
    drawnNumbersCount?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryClassicUpdateprizesInput | InputJsonValue[]
    ownerEmail?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    winningNumbers?: InputJsonValue | InputJsonValue | null
  }

  export type LotteryLikeUpsertWithoutTicketsInput = {
    update: XOR<LotteryLikeUpdateWithoutTicketsInput, LotteryLikeUncheckedUpdateWithoutTicketsInput>
    create: XOR<LotteryLikeCreateWithoutTicketsInput, LotteryLikeUncheckedCreateWithoutTicketsInput>
    where?: LotteryLikeWhereInput
  }

  export type LotteryLikeUpdateToOneWithWhereWithoutTicketsInput = {
    where?: LotteryLikeWhereInput
    data: XOR<LotteryLikeUpdateWithoutTicketsInput, LotteryLikeUncheckedUpdateWithoutTicketsInput>
  }

  export type LotteryLikeUpdateWithoutTicketsInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conditions?: LotteryLikeUpdateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeUpdateprizesInput | InputJsonValue[]
    link?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    owner?: UserUpdateOneRequiredWithoutOwnedLotteriesLikeNestedInput
  }

  export type LotteryLikeUncheckedUpdateWithoutTicketsInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conditions?: LotteryLikeUpdateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeUpdateprizesInput | InputJsonValue[]
    link?: StringFieldUpdateOperationsInput | string
    ownerEmail?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
  }

  export type LotteryFundraisingUpsertWithoutTicketsInput = {
    update: XOR<LotteryFundraisingUpdateWithoutTicketsInput, LotteryFundraisingUncheckedUpdateWithoutTicketsInput>
    create: XOR<LotteryFundraisingCreateWithoutTicketsInput, LotteryFundraisingUncheckedCreateWithoutTicketsInput>
    where?: LotteryFundraisingWhereInput
  }

  export type LotteryFundraisingUpdateToOneWithWhereWithoutTicketsInput = {
    where?: LotteryFundraisingWhereInput
    data: XOR<LotteryFundraisingUpdateWithoutTicketsInput, LotteryFundraisingUncheckedUpdateWithoutTicketsInput>
  }

  export type LotteryFundraisingUpdateWithoutTicketsInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryFundraisingUpdateprizesInput | InputJsonValue[]
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    owner?: UserUpdateOneRequiredWithoutOwnedLotteriesFundraisingNestedInput
  }

  export type LotteryFundraisingUncheckedUpdateWithoutTicketsInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryFundraisingUpdateprizesInput | InputJsonValue[]
    ownerEmail?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
  }

  export type UserUpsertWithoutTicketsInput = {
    update: XOR<UserUpdateWithoutTicketsInput, UserUncheckedUpdateWithoutTicketsInput>
    create: XOR<UserCreateWithoutTicketsInput, UserUncheckedCreateWithoutTicketsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTicketsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTicketsInput, UserUncheckedUpdateWithoutTicketsInput>
  }

  export type UserUpdateWithoutTicketsInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    accountStatus?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    DataOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownedLotteriesLike?: LotteryLikeUpdateManyWithoutOwnerNestedInput
    ownedLotteriesFundraising?: LotteryFundraisingUpdateManyWithoutOwnerNestedInput
    ownedLotteriesClassic?: LotteryClassicUpdateManyWithoutOwnerNestedInput
    transactionHistory?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTicketsInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    accountStatus?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    DataOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownedLotteriesLike?: LotteryLikeUncheckedUpdateManyWithoutOwnerNestedInput
    ownedLotteriesFundraising?: LotteryFundraisingUncheckedUpdateManyWithoutOwnerNestedInput
    ownedLotteriesClassic?: LotteryClassicUncheckedUpdateManyWithoutOwnerNestedInput
    transactionHistory?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutTransactionHistoryInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    fullName?: string | null
    email: string
    picture?: string | null
    balance?: number
    accountStatus?: $Enums.AccountStatus
    DataOfBirth?: Date | string | null
    tickets?: TicketCreateNestedManyWithoutUserInput
    ownedLotteriesLike?: LotteryLikeCreateNestedManyWithoutOwnerInput
    ownedLotteriesFundraising?: LotteryFundraisingCreateNestedManyWithoutOwnerInput
    ownedLotteriesClassic?: LotteryClassicCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutTransactionHistoryInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    fullName?: string | null
    email: string
    picture?: string | null
    balance?: number
    accountStatus?: $Enums.AccountStatus
    DataOfBirth?: Date | string | null
    tickets?: TicketUncheckedCreateNestedManyWithoutUserInput
    ownedLotteriesLike?: LotteryLikeUncheckedCreateNestedManyWithoutOwnerInput
    ownedLotteriesFundraising?: LotteryFundraisingUncheckedCreateNestedManyWithoutOwnerInput
    ownedLotteriesClassic?: LotteryClassicUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutTransactionHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionHistoryInput, UserUncheckedCreateWithoutTransactionHistoryInput>
  }

  export type UserUpsertWithoutTransactionHistoryInput = {
    update: XOR<UserUpdateWithoutTransactionHistoryInput, UserUncheckedUpdateWithoutTransactionHistoryInput>
    create: XOR<UserCreateWithoutTransactionHistoryInput, UserUncheckedCreateWithoutTransactionHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionHistoryInput, UserUncheckedUpdateWithoutTransactionHistoryInput>
  }

  export type UserUpdateWithoutTransactionHistoryInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    accountStatus?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    DataOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketUpdateManyWithoutUserNestedInput
    ownedLotteriesLike?: LotteryLikeUpdateManyWithoutOwnerNestedInput
    ownedLotteriesFundraising?: LotteryFundraisingUpdateManyWithoutOwnerNestedInput
    ownedLotteriesClassic?: LotteryClassicUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionHistoryInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    accountStatus?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    DataOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketUncheckedUpdateManyWithoutUserNestedInput
    ownedLotteriesLike?: LotteryLikeUncheckedUpdateManyWithoutOwnerNestedInput
    ownedLotteriesFundraising?: LotteryFundraisingUncheckedUpdateManyWithoutOwnerNestedInput
    ownedLotteriesClassic?: LotteryClassicUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type TicketCreateManyUserInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    lotteryId: string
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
  }

  export type LotteryLikeCreateManyOwnerInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    conditions?: LotteryLikeCreateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeCreateprizesInput | InputJsonValue[]
    link: string
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
  }

  export type LotteryFundraisingCreateManyOwnerInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    price: number
    prizes?: LotteryFundraisingCreateprizesInput | InputJsonValue[]
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
  }

  export type LotteryClassicCreateManyOwnerInput = {
    id?: string
    hosted: string
    title?: string | null
    description?: string | null
    image?: string | null
    paticipationdescription?: string | null
    startDate?: Date | string
    endDate: Date | string
    lotteryStatus?: $Enums.LotteryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    availableNumberRange: number
    drawnNumbersCount: number
    price: number
    prizes?: LotteryClassicCreateprizesInput | InputJsonValue[]
    participantCount?: number | null
    winnersTickets?: InputJsonValue | null
    winningNumbers?: InputJsonValue | null
  }

  export type TransactionCreateManyUserInput = {
    id?: string
    amount: number
    transactionType: $Enums.TransactionType
    creditCard?: string | null
    createdAt?: Date | string
  }

  export type TicketUpdateWithoutUserInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
    lotteryClassic?: LotteryClassicUpdateOneWithoutTicketsNestedInput
    lotteryLike?: LotteryLikeUpdateOneWithoutTicketsNestedInput
    lotteryFundraising?: LotteryFundraisingUpdateOneWithoutTicketsNestedInput
  }

  export type TicketUncheckedUpdateWithoutUserInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    lotteryId?: StringFieldUpdateOperationsInput | string
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
  }

  export type TicketUncheckedUpdateManyWithoutUserInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    lotteryId?: StringFieldUpdateOperationsInput | string
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
  }

  export type LotteryLikeUpdateWithoutOwnerInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conditions?: LotteryLikeUpdateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeUpdateprizesInput | InputJsonValue[]
    link?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    tickets?: TicketUpdateManyWithoutLotteryLikeNestedInput
  }

  export type LotteryLikeUncheckedUpdateWithoutOwnerInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conditions?: LotteryLikeUpdateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeUpdateprizesInput | InputJsonValue[]
    link?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    tickets?: TicketUncheckedUpdateManyWithoutLotteryLikeNestedInput
  }

  export type LotteryLikeUncheckedUpdateManyWithoutOwnerInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conditions?: LotteryLikeUpdateconditionsInput | InputJsonValue[]
    prizes?: LotteryLikeUpdateprizesInput | InputJsonValue[]
    link?: StringFieldUpdateOperationsInput | string
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
  }

  export type LotteryFundraisingUpdateWithoutOwnerInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryFundraisingUpdateprizesInput | InputJsonValue[]
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    tickets?: TicketUpdateManyWithoutLotteryFundraisingNestedInput
  }

  export type LotteryFundraisingUncheckedUpdateWithoutOwnerInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryFundraisingUpdateprizesInput | InputJsonValue[]
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    tickets?: TicketUncheckedUpdateManyWithoutLotteryFundraisingNestedInput
  }

  export type LotteryFundraisingUncheckedUpdateManyWithoutOwnerInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryFundraisingUpdateprizesInput | InputJsonValue[]
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
  }

  export type LotteryClassicUpdateWithoutOwnerInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availableNumberRange?: IntFieldUpdateOperationsInput | number
    drawnNumbersCount?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryClassicUpdateprizesInput | InputJsonValue[]
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    winningNumbers?: InputJsonValue | InputJsonValue | null
    tickets?: TicketUpdateManyWithoutLotteryClassicNestedInput
  }

  export type LotteryClassicUncheckedUpdateWithoutOwnerInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availableNumberRange?: IntFieldUpdateOperationsInput | number
    drawnNumbersCount?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryClassicUpdateprizesInput | InputJsonValue[]
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    winningNumbers?: InputJsonValue | InputJsonValue | null
    tickets?: TicketUncheckedUpdateManyWithoutLotteryClassicNestedInput
  }

  export type LotteryClassicUncheckedUpdateManyWithoutOwnerInput = {
    hosted?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    paticipationdescription?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lotteryStatus?: EnumLotteryStatusFieldUpdateOperationsInput | $Enums.LotteryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availableNumberRange?: IntFieldUpdateOperationsInput | number
    drawnNumbersCount?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    prizes?: LotteryClassicUpdateprizesInput | InputJsonValue[]
    participantCount?: NullableIntFieldUpdateOperationsInput | number | null
    winnersTickets?: InputJsonValue | InputJsonValue | null
    winningNumbers?: InputJsonValue | InputJsonValue | null
  }

  export type TransactionUpdateWithoutUserInput = {
    amount?: IntFieldUpdateOperationsInput | number
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    creditCard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateWithoutUserInput = {
    amount?: IntFieldUpdateOperationsInput | number
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    creditCard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutUserInput = {
    amount?: IntFieldUpdateOperationsInput | number
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    creditCard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketCreateManyLotteryLikeInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
    userEmail: string
  }

  export type TicketUpdateWithoutLotteryLikeInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
    lotteryClassic?: LotteryClassicUpdateOneWithoutTicketsNestedInput
    lotteryFundraising?: LotteryFundraisingUpdateOneWithoutTicketsNestedInput
    user?: UserUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type TicketUncheckedUpdateWithoutLotteryLikeInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
    userEmail?: StringFieldUpdateOperationsInput | string
  }

  export type TicketUncheckedUpdateManyWithoutLotteryLikeInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
    userEmail?: StringFieldUpdateOperationsInput | string
  }

  export type TicketCreateManyLotteryFundraisingInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
    userEmail: string
  }

  export type TicketUpdateWithoutLotteryFundraisingInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
    lotteryClassic?: LotteryClassicUpdateOneWithoutTicketsNestedInput
    lotteryLike?: LotteryLikeUpdateOneWithoutTicketsNestedInput
    user?: UserUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type TicketUncheckedUpdateWithoutLotteryFundraisingInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
    userEmail?: StringFieldUpdateOperationsInput | string
  }

  export type TicketUncheckedUpdateManyWithoutLotteryFundraisingInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
    userEmail?: StringFieldUpdateOperationsInput | string
  }

  export type TicketCreateManyLotteryClassicInput = {
    id?: string
    lotteryType: $Enums.LotteryType
    ticketNumber: string
    purchaseDate?: Date | string
    status?: $Enums.TicketStatus
    numbers?: InputJsonValue | null
    userEmail: string
  }

  export type TicketUpdateWithoutLotteryClassicInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
    lotteryLike?: LotteryLikeUpdateOneWithoutTicketsNestedInput
    lotteryFundraising?: LotteryFundraisingUpdateOneWithoutTicketsNestedInput
    user?: UserUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type TicketUncheckedUpdateWithoutLotteryClassicInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
    userEmail?: StringFieldUpdateOperationsInput | string
  }

  export type TicketUncheckedUpdateManyWithoutLotteryClassicInput = {
    lotteryType?: EnumLotteryTypeFieldUpdateOperationsInput | $Enums.LotteryType
    ticketNumber?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    numbers?: InputJsonValue | InputJsonValue | null
    userEmail?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LotteryLikeCountOutputTypeDefaultArgs instead
     */
    export type LotteryLikeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LotteryLikeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LotteryFundraisingCountOutputTypeDefaultArgs instead
     */
    export type LotteryFundraisingCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LotteryFundraisingCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LotteryClassicCountOutputTypeDefaultArgs instead
     */
    export type LotteryClassicCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LotteryClassicCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LotteryLikeDefaultArgs instead
     */
    export type LotteryLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LotteryLikeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LotteryFundraisingDefaultArgs instead
     */
    export type LotteryFundraisingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LotteryFundraisingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LotteryClassicDefaultArgs instead
     */
    export type LotteryClassicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LotteryClassicDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketDefaultArgs instead
     */
    export type TicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransactionDefaultArgs instead
     */
    export type TransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransactionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}